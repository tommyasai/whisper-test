This week on the James Law, we're talking about the recent falling-up between Elastic and AWS around the
re-licensing of Elastic Search and Cabana, like mainly the community we've been watching
this very closely. Here's the TLDR for context. Last month, on January 21st, Elastic
posted a blog post sharing their concerns, with Amazon and AWS misleading and confusing
the community staying quote, they have been doing things that we think are just not okay since
2015 and it has only gotten worse and quote, this led them to re-license Elastic Search and Cabana
with a dual license, a proprietary license, and the server side puddle license, also known as the
SSPL. Of course, AWS responded to this later stating that they are quote, stepping up right
truly open source Elastic Search and quote, and shared their plans to create and maintain
forks of Elastic Search and Cabana based on the latest ALV2 license code basis. There is of course
a ton of detail and nuance beneath the surface here, so we invited a bunch of folks on the show today
to share their perspective. You'll hear from Adam Jacob, co-founder and board member of chef,
Heather Meeker, open source lawyer and the author of the SSPL license, managed John founder and
CTO at D-Graf Labs, Paul Diggs, co-founder and CTO at influx data, Vicki Bersour, open source
and free software business strategist, and last but not least, Marcus Thinkvist and every day
with the developer from Sweden. Here's things to our partners, Linnode,
Fastly and Launch Darkly. Linnode is our cloud of choice, check them out at Linnode.com slash
change log, our bandwidth is provided by Fastly, check them out at fastly.com, and our feature flags
are powered by Launch Darkly, learn more at launchdarkly.com.
Linnode is simple, affordable, and accessible cloud computing the developers trust.
Linnode is our cloud of choice, we trust them, and we think you should build anything you're
working on, a fun side project, or that next big infirmative of work with Linnode. The best part,
you can get started on Linnode with the 100% free credit, get all the details at Linnode.com slash
change log, or text, change log to 474747, and get instant access to the 100% free credit
again, Linnode.com slash change log.
What's up, welcome back, we have an awesome show today, we're here to get community reactions around
the elastic versus AWS situation, and the SSK license change of elastic search and carbonate.
Elastic relations with the SSPL, and there's a few people on this show that believe they
went about that license change the wrong way, but this is not the beginning of the story.
This conversation has been going on for a while, in fact, Adam Jacob brought the subject of
elastic and AWS on episode 353 of this show, on that episode we talked with Adam about the
war for the soul of open source, and the title of that episode could not have been more prophetic.
To kick things off, we're going back to that conversation with Adam, for context,
Adam is co-founder and board member of chef, and we're talking about business models,
and how they correlate to open source business models, and how from Adam's perspective,
the AWS is the Azures and the Google Clouds of the world, they provide a humongous
marketing funnel for open source businesses like Mongo Anilastic. Here's the conversation with
Adam. What the business challenges commercial open source companies face, you said early in the
call that things are thriving now, and we see elastic and others out there thriving as well
that have been in similar situations of chef, talk about the business side of things for chef.
I mean, I think in order to really get deeper into business, we gotta like just set some
ground rules for like how we think about business, so like how I think about it and how I think
a lot of people in the sort of modern era, software startups think about it is,
you know, the smallest nutshell, you can imagine that you have this funnel, right?
And at the top of the funnel is everybody who might could ever use your product, right? So every
possible person who would ever care, so that's your target market. The bottom of the funnel
is customers, people who pay you money for the privilege, and what you're trying to do is get
people from the top of the funnel to the bottom of the funnel, right? It's just how many people at
the top can I push to the bottom, and there's a ratio there where, you know, you want that
number to be as high as possible, you'd love to get a hundred percent of them, you know that you
want, right? And so you're trying to just extract dollar bills from the top to the bottom.
There's a bunch more we could go into in terms of like metrics and, you know, recurring revenue
and all kinds of stuff, but sort of the TLDR there is people at the top money at the bottom.
So with open source, we talk about it as an open source business model, but that's wrong in the
same way that, like, DevOps isn't a job title. So like, you can't, DevOps isn't a job title,
it's still isn't a job title, it never was a job title, but we lost the war, you know,
like there's plenty of DevOps engineers in the world, and so the idea that that's not a thing,
it doesn't matter that I'm a patent about it, right? The same thing's true in open source
business models. There is an open source business model. There are business models,
and then there is open source, and there are two very different, very separate things.
There is nothing unique about open source in business. Business is business.
You get people from the top of the funnel to the bottom of the funnel. You either do that
with a unit economics that make you money or don't make you money. If they make you money,
then you can pour more dollar bills into the acquisition of people at the top of the funnel
to get to the bottom. Even if that means you don't turn in that profit and still be a great
business because as soon as you stop burning money to acquire more stuff at the top,
but you make a lot of money at the bottom, right? And so in open source, what we talk about
open source business models, what we really are talking about is how do I create a channel
at the top of the funnel? So people come in multiple different ways and we talk about those
channels. So one channel will be I'm an open source user of your software. I download MongoDB.
I download Redis. I've used it. Therefore I'm an open source channel so the bottom of the funnel,
right? Another channel would be my boss, the CIO, heard about Redis, and CIO magazine.
Tells me, you should use Redis, right? No, I'm in a very different channel than the open source channel,
right? No, I'm in an enterprise that, or like, I get a, or I get a cold email from a rep
that says, have you heard about Redis Labs, right? That's a different channel, right?
So we have all these different channels. There's a partner channel where like maybe the guy at
pivotal who was consulting on your cloud foundry deployment tells you that you should use Redis.
That's a partner channel, right? So like we have all these different channels that people come
into our businesses through, right? This is true of every business. Again, it's not a unique
to open source. But that open source channel is interesting because it's huemongous, right? If you're
a successful open source project, that channel is full of people, right? Because lots of people
are using the software. That's why it's successful open source software. So it kind of dwarfs the
others in peer numbers, right? Just the sheer magnitude of what's possible is really high. And so
when we're designing and thinking about our businesses, what tends to happen is we think about
the revenue that that channel produces as belonging to us. Right? If I'm the chef people,
I look at that channel and I go, any chef user belongs to me. And if there's competition in that
channel, I don't like it. Because it means somebody else can compete with me to monetize
the people that are at the top of the funnel, right? So a good example here is if I'm MongoDB
and I sell Atlas, which is their hosted SaaS product for MongoDB. And Amazon and Microsoft
are both going to offer MongoDB as a service. That competes with me to monetize the bottom of
the MongoDB funnel, right? I'm MongoDB, make this investment at the top of the channel. I expect
to return to the bottom and now they're competing with me in the bottom. And this comes back to how
do you feel about that competition is the question? Because in 1.0, you're like, what competition sucks?
Right? I'm the one who put all the money into building it. I'm the one who get all of this stuff.
And so you look at this thing and you're like, I deserve the money at the bottom of this channel.
Well, flip that over though. The value of the channel is that it's massively huge. It's adoption.
It's the size of the number of users is why the open source channel is valuable in the first place.
If Amazon or Microsoft create services that sell what I sell, what's the impact of the top of
the channel? Right? What's that do to cement MongoDB as an excellent choice for users of the
top of the channel? Right? The answer is, it jacks it up, right? Like Amazon has a chef service.
They sell it from money. They do revampion. Right? So they sell my, what used to be my proprietary
software, but now my distribution. You can buy it from Amazon as a service directly from Amazon.
We do rev sharing together. Amazon runs and maintains that service. I promise you that my channel
dot bigger. I open source channel dot bigger when they did that. Right? The fact that that button
exists meant more people were willing to use chef than they were before. Right? The pie got bigger.
So what's happening when the redness and the mongos of the world look at that problem is they decide
that the top of the funnel doesn't get bigger or that they don't care about it getting bigger.
And instead they care about the extraction at the bottom of the funnel. Right? So they're
nervous about it. They're like, oh, Amazon will out compete me. They'll sell it for less,
though that very better features. But this, to my point of view, is completely bonkers. Right?
Amazon's never going to invest more in MongoDB than MongoDB. It's insane on its face. Right?
And the idea that that competition exists and it limits their ability to monetize is also,
also to me, feels false. A good example is elastic. Amazon's had an elastic service running
for as long as elastic has been monetizable basically and elastic went public that whole time
with Amazon as a competitor. But you know what? I've ran elastic search. I used it as a component
in my product. One of the reasons is that it was a dominant standard. How did I know? Well,
everybody offered elastic as a service. Right? It was the de facto thing. So that choice was easy.
So I wound up being a channel. So from a business point of view, they're making these decisions
because they believe that that's what's best for the extraction of capital of revenue at the
bottom of the channel. And they're doing it at the expense of the spread at the top of the channel.
In your case, you've got a revshare with Amazon. Is that the case with Mongo or with Redis
or was that unique to Chef? And would that change your outlook at all if I revshare was gone?
It's not the same. I don't know. I certainly am not privy. So whatever the negotiations they
may have had, right? I know the ones I had. You know, one of the things that Amazon or any partner
or anybody who's going to run your code as a service needs is the assurance that they'll always
be able to provide that service to their customers. Right? And you know what's hard to do that with
proprietary software? Because I have no, my only hedge is the business arrangement. Do you see what I mean?
Like, I can sign a contract that says so. But if I change the terms on my proprietary software
or I build a new skew, well, can I still run that thing as a service or we've bifurcated it?
Like, what's the deal? So the mechanism there is really complicated. So one of the reasons that
that revshare exists is because so much of those assurances about what's in the open was in the open.
Right? Even more so now. That doesn't mean that that's always what Amazon will do or even
what they should. But that's how it worked for us. And if it didn't exist, it wouldn't really change
by point of view. Because if the question is, can I as the primary producer of the product
and owner of the brand and the reason that people attach to those things outcompete someone
who is essentially selling a generic version of what I sell? If I can't outcompete that person,
shame on me. Like, you really can't convince me. You really can't convince a customer
that the best person to service their MongoDB is MongoDB. Because man, if you can't,
like, there's something fundamentally broken in the value proposition here. Right? And I think the
truth is that they can't. If you look at Mongo's performance, if you look at Atlas's sales numbers,
it continues to go up. It was going up before they changed the license. Right? And the reason
is, it's a good product. And it's a better product than the one that you receive if you just
turn on document DB on Azure. Because it's kind of bare bones when you turn it on an Azure. Right?
And the Atlas version has all kinds of stuff that the other one doesn't have. The idea that that competition
in open source, where the reason you're here is because you have this massive channel,
it doesn't make much business sense to me that that's the conclusion we would come to. I understand
how you get there, but it doesn't make no sense. Isn't our disruptive products, though,
not necessarily better? They're usually actually worse, but they're good enough. And the cost
is disruptive. And so in the case of an AWS version of Mongo, yes, not going to be as good or as
maybe well supported or have as many features as Mongo's version of Mongo, but it's satisfactory
and it's way cheaper. So it's just relatively cheap. And then you add to the fact that there's no,
there's no R&D, there's no development costs from Amazon's side. So you're not competing with them
on features. They're just free writing all the features that you're building. Well, but here's the thing.
So this is where we come back to the funnel, right? So like, now we're back to the business. So like,
sure, maybe Amazon, but this is why it's good business for Amazon to launch your stuff as a
service instead of just compete with you directly. So like, you've brilliantly elucidated why
they would want to launch a Mongo service in the first place, right? But as soon as they do that,
it's the top of the funnel was fixed. If that created no more interest in your product
and then it did before, then you'd be right. But it doesn't. Instead it turns out that the single
largest pool of software developers on the planet are the ones that use Amazon and AWS for Azure,
or Google, how many of those developers using one of those platforms? And if your stuff is on
all three of those platforms and it's not on the others, how many eyeballs do you get that cockroach
doesn't? The answer is, on a ton of eyeballs, so many eyeballs. And so the size of that funnel,
your possible monetization gets bigger, hugely bigger than it was before. And in that moment,
your ability to capture that revenue. Every single one of those cut rate, document DB users
is a potential lead that's already using your product. So what you have to do is go find them and
be like, yo, did you see how much better our console is? How much better our operation stuff is?
How you can get on a zoom with a dude that wrote that indexing feature when it's broken? I dare
you to get that out of Amazon. And next thing you know, city bank is like, you know,
AWS looks pretty good. I think those kinds of ideas, those sometimes are so
seem so logical, but yet not everybody thinks like that, you know? So yeah, I think it's a great
idea of how could you leverage the fact that these platforms are so massive that they actually
become your marketing channel for you. They are your marketing channel for you. And that only
the only thing you have to give up is that they're also going to monetize some number of your
customers back to open sources, punk rock nests, right? Like there's a there's a like that's the
man vibe where like when you're saying that Amazon's in that positive for your business,
everybody's like, but they're the man. And Amazon's going to destroy elastic search. And you're like
to the elastic search is a worth $1.5 billion with it being. And they're getting like that commercial
or the guy's like, sir, you are the man for that commercial. Like who exactly are we protecting here?
Because last time I checked, they were public and killing it.
Next up is Heather Meeker. Heather is a law-respected open source lawyer and a specialist in open source
software licensing and strategy. She wrote the book opens her for business and it serves as a guide
to open source software licensing. We're talking to Heather because she's a lawyer who wrote the
license. The SSPL license is a result of her work with MongoDB. And we wanted to understand the design
and the intention of the license. All right, here we go with Heather. Heather, let's open up with the
SSPLU or the person behind writing it. Is that correct? Yes, I helped MongoDB draft the license.
With, of course, the help of Mongo legal counsel and their business team, I think it's very
to say that I led the drafting of it. Gotcha. And full title of it is the server-side public license.
Yes, that's right. Take us back to, I suppose the early days of drafting of what's
intended to do was the goal of this license. SSPL was drafted in order to meet a need in a particular
way. So I explained what I mean by that. At the time, and this would have been late 2018 to early
2019, many companies that were providing software under open source licenses were very concerned
about the use of the software by cloud services providers. And what they were concerned about was
that the cloud service providers were using the software not contributing back and not participating
in the development of the software. So at that time, there were actually quite a few companies.
And most of these, by the way, were companies in what I would call the flat form software space
or middle software space. And they were trying to figure out what to do about that.
They basically went down two different routes. The first route was the source available route
in what we call an open core business model. And that's not what SSPL is. But that's where you
have a core of open source software, usually under say Apache. And then you reserve some of the
upsell elements for under proprietary or source available licenses. That's the route that most
companies went down. Mongo on the other hand wanted to see if they could create a license that was an
open source license, but that managed this issue. And that's how the SSPL came about.
So they drafted the license, submitted it to open source initiative for approval as an open source
license. And eventually it was withdrawn after quite a bit of comment without a particular ruling
from OSI on whether it was appropriate for approval as an open source license.
What happened in that proceeding? Why wouldn't I hold the deciding fact? I guess they didn't
reject it, but it was just like being debated to a certain degree. And then withdrawn eventually.
I assume it's withdrawn because it was not going anywhere or was there different reason for withdrawing
it? It was a long and fraught debate. And the debate had to do with a number of concerns.
I would encourage anybody who's interested to go and read the archives of what's called
license review or license discuss. But I'll try to summarize. Understanding that there were a lot
of comments and I can't summarize them all. The first was technical commentary about whether the
license met the open source definition. So there is a definition of open source. There's also a
free software definition. One of the main tenets of that definition is that the license can't have
any license restrictions. So that would be source available. If you say you can't use a software
for this purpose. It also says that it can't discriminate against users or technology
contexts and so forth. I'm paraphrasing, of course. So there were those aspects and there were
some comments about that aspect of a license. There were also a lot of comments about who had
drafted it, the process by which it was drafted and what Mongo's intent was in creating the
license. So those were like meta comments, not about the license itself, but about the context.
And so all of those things were being discussed. And if you've ever been on one of these discussion
groups, you know that they get discussed in a non sequential format. And it can be very confusing
to follow. But I'd say those were the main themes. Okay. And so do you think that, I mean,
I don't know if bias is the author of the SSPL, do you believe that the SSPL represents,
I guess even the spirit of open source, if it's not officially an open source license,
or do you think it's something different? Well, we drafted it to fit the open source definition.
Okay. And as a lawyer, you know, you have to have concrete things to go on and the open source
definition is what we had. I think the discussion brought out that people felt that there was
something beyond meeting the open source definition that needed to be satisfied. And there was a
great deal of debate about that. So we looked at the open source definition. We definitely, you know,
avoided license restrictions. We avoided things that were discriminatory according to the requirements
of the OSD. But all of the meta issues were things that really kind of couldn't be addressed
by the draft itself. There is some discrimination built in though, right? Or how does it actually
how does it work in order to stop that particular problem that they're always going to address
that discriminating in the use? And then we get into legalese here, but you're good at this.
So help me understand. I would say not discriminatory because in a way all copy left licenses
apply different conditions when you do different things. So if you use discriminatory in that way,
then GPL2 is discriminatory because it only applies certain conditions to redistributors.
So that is actually fair game in copy left licensing. Okay. SSPL applied specific conditions to use
of the software. I'm paraphrasing now, but as a software, software is a service to provide the
same functionality of the software. And so yes, there were conditions that were imposed in those
situations that weren't imposed otherwise. But that I think for most people isn't the meaning
of discriminatory according to the OSD. Discriminatory would be more like you can only use this
in a particular field of use. Like you can use it in medical devices, but you can't use it in
nuclear weapons or something like that. You can use it for good, but not for evil. Well,
it's interesting that you say that because there is now a new licensing movement. I guess
called that ethical licensing movement that actually does impose conditions based on
ethical concerns and moral concerns. And those are clearly not open source licenses because they
actually do impose license restrictions. In other words, you can't use the software for this
particular purpose. I heard about this too, where I believe it was in China. There was a specific
license about companies that didn't adhere to work ethics, where I think it was like a 999 or something.
999, the anti-996 license. That was actually very interesting if you'll permit me to make a
comment about it. It was, first of all, a very well-drafted license. So it was professionally done.
It did address labor conditions. And again, I'm paraphrasing, but the license says you can't
use this software if you are violating the international labor standards. And it was intended to raise
consciousness about labor practices in China. But what was really interesting about that is that
the license was released on GitHub. And by the way, I think it may have been more a thought experiment
than anything else. But it then caused that GitHub repository to become a vehicle for people to
discuss the issue. So it became almost like a social networking initiative to raise consciousness
about the issue rather than specifically to develop a license document. So I thought that was a very
interesting phenomenon from the point of view of what happened around the putting the license in GitHub
and around the development of the license.
This episode is brought to you by our friends at Retool. Retool helps you build internal tools fast
and easy. From startups to Fortune 500, the world's best teams use Retool to power their
internal apps. Assemble your app in just a few minutes by dragging and dropping from pre-built components,
connect to most databases or anything with a rest, graph QL or GRPC API. Retool empowers you to work
with all your data sources seamlessly in one single app. Retool is highly hackable so you're
never limited by what's available out of the box. If you can read it in JavaScript and an API,
you can build it in Retool. You can use their cloud service or host it on prem for yourself.
Learn more and trap free at retool.com slash changelog. Again, retool.com slash changelog.
It's interesting how, you know, there's so many uses of licenses and you mentioned the OSI
approval process and how it was contextual in terms of their Mongo's intent of the license change
and the intent of the SSP license in general. And you also mentioned, you know, the OSD and its
criteria in your blog post on the cost community you mentioned, how many of their legacy license
in the OSI approved long ago would probably not be approved today. And then you mentioned that the
criteria for the approval has changed, but the OSD has not. So it seems like there's like a lot
of moving targets in terms of getting approved by the OSI, and Jared mentioned, like, you know,
in terms of this isn't an OSI approval license, do you feel it is open source? It's kind of an
interesting perspective. Just the fact that there's this OSD that's been drafted. I think the
last time it changed was 2007, if I recall correctly. But it was a long time that it changed.
It basically, you know, hasn't changed in the time that I can remember looking at it. And
but I think what's interesting about that is that what OSI is doing is trying to create community
consensus and isn't wedded to this written definition. By the way, I don't, I say that because
that's what they say. It's approval of a license does not merely require it to meet the
open source definition. So it does rate it as an interesting question about the clarity of the
criteria and the process. But, you know, this is a community process. So those are always
they are living breathing things and they get developed as they go, and people are always pushing
for transparency, but it can never be, you know, perfect. The fact that this OSD document
hasn't changed in a while. Is that a good thing or bad thing? Because you might say it's a bad thing
because it doesn't reflect the way the modern software is developed and deployed into consumers' hands.
And then you might say it's a good thing because it's so strong. It doesn't need to change. The
definition is so strong that, you know, it doesn't have to change. What do you think about
whether it's, the fact that it hasn't changed and so long that it's a good thing or a bad thing?
Well, I actually agree with you. It's kind of a good thing in a bad thing.
It has worked pretty well over the years and it's been remarkably robust over the years.
Maybe it's time to revisit it, but that would also be a very long process and possibly very
controversial. There are other definitions, by the way, there's the free software definition,
and there's a Debbie and soft, I think it's called the software contract. Sorry if I'm getting
that wrong, but those are much shorter and less complicated. So I think if it were revised,
it might, there might be some interesting possibilities to harmonize those definitions.
I would say that whether the definition changes or not is one question, I do think that the
transparency of the criteria for approval is very important to the community.
What's at stake for these companies and organizations? Maybe they pick SSPL, whether or not
it's an improved license or not. What do they win or lose based on that is it?
Well, marketing value of the term is it goodwill. What's at stake?
SSPL is used as part of a dual licensing model and that is something that has been around for a long
time, but it's not as popular as it once was. So it was really pioneered by my SQL.
And so what they did was they said, here's our software, it's under GPL, actually they used a
variant of GPL. And if you don't want to abide by the GPL requirements, you can negotiate with
us for a commercial license. And that's a process that sometimes called selling exceptions. So the
strong copy lift licenses like GPL and then later AGPL and then finally SSPL were all used in
other contexts as well, but as part of these dual licensing initiatives. The reason that companies
adopted them in a dual licensing strategy is that they were intending that people who are using
the software commercially would probably have to come negotiate for a license. And what happened
over time was that the MySQL model, which worked pretty well, began to break when software moved
up to the cloud because the requirements of GPL only kicked in on redistribution and that wasn't
happening anymore because of cloud deployment. So then companies that were doing dual licensing models
moved to AGPL when it was released and I think that was 2007. And SSPL is, I think, you know,
a kind of a logical extension from that. So that's what they're trying to do. They're trying to
allow people to use the software for certain, you know, in a, you know, say, to test it out,
to use it on a small scale, to use it, to do certain things, but to require people to come
to the table when they want to do things at scale or certain kind of commercial activities.
Because the cloud providers are user essentially, right? I mean, at that point.
Yes, that's actually very perceptive. They are users. They're not distributors of software.
Right. And it's a little bit of a complicated question, but I don't think there's too much
doubt about that. So what that means, if you look at the GPL say, it specifically says that the
license doesn't control the use of software. And so that is where the issue comes to play
because the cloud providers are users, and so under say GPL, they don't have any, you know,
basically don't have any conditions at all. Right. And it's kind of odd to say, I'm
sure they're not distributing it out to, you know, individual installations, but they are providing
it to many. So it's still one to many, it's still many scenarios. So, and that that's
usually where the issue is the language of the future of software the way it is is not so much,
especially in cloud is not a distributed model. That's a single installation that means
user distribution of change. You're no longer sending binary or source code to be compiled
by a bunch of people, you are setting up a service and then charging for the service. It's just
it's a new way of doing it, newer. Yeah. And, you know, copyright law treats use in distribution
a little bit differently. I think that one of the things that maybe it didn't anticipate properly
was use was copying at scale in order to deploy software for hundreds or thousands of users.
That is something that is, you know, relatively new. So, as software licensing has progressed,
you know, certain things worked pretty well when we were in a model where one person would
use one copy of the software, but that isn't the world we live in anymore. So, when it comes to
the letter of the SSPL as reactions to Mongo initially and now Elastic,
Relyzancy now, there have been critics. There have been, and this is a debated thing about the
topic. Is it open source? Is it fopensource? Which is I think it's a terrible term. I can't
say if I just hopped on the bed and I can use it, but this is the verbiage that's out there. There are
those who think it's a business risk, this SSPL. So, now I'm reading from Vicki Prissurus blog. You
probably have read this. And, and she says she showed it to some lawyers, some IP lawyers, and
she says by using an SSLP project in your code, you are agreeing that if you provide an online
service using that code, then you will release not only that code, but also the code for every
supporting piece of software all under the SSPL. It's not a stretch to interpret the wording of
the license as requiring users of the SSPL software. Therefore, to release the code for everything
straight down to the bare metal. This is one interpretation of the license itself, saying effectively
that there's perhaps this collateral damage that might happen because of the way that it's written.
I just love to hear as the author of it, and I'm sure you've thought through these things.
What, how do you respond to that? What do you think about that statement? Is it feasible? Is
it outlandish? Well, I do think it's an over simplification of the terms of the license. And,
don't get me wrong. These kinds of provisions are very complicated to read. So, it's hard to
reduce them to soundbites. I do think on the question of business risk, this is the way I look at it.
I work with many, many companies to develop open source compliance policies. And so, what companies
do when they develop those policies is they have like a stop-go caution list. And you would not
expect even AGPL to be on a go list. In fact, it's usually on a stop list already. And SSPL will be
there to any network copy left license, meaning any license that has source code sharing requirements
when you deploy within over a network. Those will all be on a stop list. So, when you say it's a business
risk, well, yeah, but already, a lot of the copy left licenses were defined as business risks.
You know, you're not, this isn't blind sighting you, this concern, it's known for me out the
outside. Yeah, of course. I mean, you would not expect people to green light SSPL software,
what they would do is they would look at the license and say, okay, this is okay with us or it's
not. And then they would make a decision about it. So, that's something that users have to
decide for themselves. I do think that what you quoted was overstating the risk somewhat, but
you know, it's not useful to get into the details of it. You have to actually look at
what the license requires and it's really is focused on particular use contexts where
people are providing software as a service. I want to say I think at a Vicki for writing this
post because I'm going to quote one more and ask you about this, but it's very, very helpful Vicki
and not doing this call with Heather. She said basically in regards to the SSPL, basically
it's a hostile proprietary license, masquerading in open source clothing. I ask it in vicious.
I don't know what to say about it. Whether it's proprietary, proprietary is not open source,
so you know, it's really the same issue. I actually think if you look at the FAQs and announcements
and so forth for Mongo and Elastic, you know, they're pretty forthcoming. So I'm not sure
what they're trying to do. Be masqueraded there. So I think that's, you know, it's language intended to
incite incite an argument, but I don't know that it's terribly meaningful and an objective way.
Yeah. The primary concern with the SSPL really is section 13, right? That's the, that's the,
like a lot of the concern isn't really elsewhere in it. Obviously, it's a long license, but it's
primarily section 13, which describes which we talked about here, which is redistribution, restrictions
on usage, et cetera. Yeah. If you were to redline it against AGPL or even GPL3, you would find that
almost all the substantive changes are in section 13. Well, Heather, thank you so much for joining us
and explaining these things in ways that we could only fumble around in the dark to understand.
I think it's been very helpful. And anything else that we didn't ask you or anything about the
license itself or about the situation that is being discussed and debated that you want to say
that we haven't asked you about? Well, I would say that I would remind people that the alternative
is probably to go to a source available license. So if people, you know, are calling it names
and so forth, you know, what they should consider is that businesses are going to do what their business
strategy requires. And so most companies that don't adopt something like SSPL are going to go
down the source available route, which is definitely not open source. So it's a question of whether
you think half a loaf is better than none, I think. And they're definitely differing views about that.
I would say the reality is that most companies are actually going to use licenses that are truly
restrictive in a way rather than SSPL. So I would say anybody who is using SSPL is at least trying
to go down something like an open source route. Even if you don't believe it's open source.
Up next, we're talking about Manish John Founder and CTO at D-Graph Labs. Manish came on this podcast
a little over two years ago on episode 32 talking about licensing and re-licensing D-Graph. So we thought
to be fitting to get him on this episode as well. So Manish, you and D-Graph are in somewhat similar
situation to Elastic. You're not elastic, but you're set up a lot like Elastic and set up. Is that right?
That's true. So Elastic's life-sensing, the way they have done it is that they have their open source
code collocated with their proprietary code. And it's all source visible except the open sources
under Apache if I'm not wrong. And then the proprietary code is under Elastic. And similar to D-Graph,
they are our open source code is Apache and our proprietary code is under D-Graph license.
So as a meta-know, where do you hear about this news and did you read both sides? Have you read
what AWS has had to say and what's happened after the relicence? What's your your purview?
I mean, I think I've been heckered news, right? I heckered news went into flames over this and so
that's where I came to know. I don't actually, I did not have a chance to look at what AWS
actually had to say about that. But I read read through the multiple blockposts that Elastic
sort of released about what they're changing and some of the readings for why they're changing. And
this is a story that it's not the first time, right? This is the same story that we already had for
cockroach DB, we had the story for MongoDB, we have this, you know, across Confluent,
and Ready Slabs, you know, this is just a series of changes that are happening in the
entire open source ecosystem. And you guys went through similar things as well because we even
have a whole show for you back in October of 2018 where we have you on the change log there and back
again, DeGrafts Tale, an excellent name. You're a fan of the Hobbit. Like I am episode 32. So you've
told us a story before, but like I guess we don't even rehash the entire thing, but this has been
an area of struggle for you and your company as well. It is something of, you know, I wouldn't say
such a big struggle as something like Elastic where Amazon is directly sort of like, you know,
a court on court attacking them, right? For us it's more of like a forward thinking scenario where
we, we, you know, we realized that we, we love open source and just like she mentioned the founder
of Elastic mentioned in his blog post, you know, I got, I got my feet dabbed into open source
like long time ago and really believe in it. And when I was starting DeGraft, I, I was not inspired
any sort of business model is right. Like I was not planning out, hey, how would like five years from now,
we will make money. I didn't know how to make money from open source. I just wanted to build open source
software, right? And that's how we got started. So similar sort of like trajectory there in terms of
like our, our interest towards open source community. And so, you know, I mean, yeah, I think the
open source team is, is, is similar data. So what's happened since, is that he, the AWS has
forked both Elastic search and Cabana and are going to carry on open source forks community forks.
That's what they're kind of being pitched at. What do you think about that? What are they going to
succeed? Are they going to fail there? Is it a real risk for Elastic or no? They did that once before,
right, with the Elastic, uh, open distro. Um, and I think people were really concerned about how
they would pan out and, uh, remind me, Elastic's share price has not decreased too much, right?
It hasn't gone into a spiral downward. So I guess they're doing well, right? Yeah, they'll
probably survive another attack from AWS. Um, but, but I think, you know, some of the criticism that
I see online about bummer DBs SSPL, um, and some, and other companies is that, you know, these open source
companies are motivated by business and, and therefore they are somehow being moralistic like,
one is more morally, they are, being challenged. But I feel like, you know, the same people that
turn around and say Amazon is completely okay with doing these kind of things because there's
well within their rights to do so because of the licensing put together by the open source. And so
the conflict that I feel is right there, right? You cannot have two different moral bars,
one for the company who is who is making money out of your inventions and the second for
the inventor themselves, right? Um, and, uh, and sometimes I just wonder, right, um, how many
open source infrastructure software has Amazon created and launched in open source, right,
like, do we, when do we expect to see DynamoDB coming out in open source? So someone else can build
a business like Amazon has done with DynamoDB. That'll be great, right? I mean, that'll be great
day for open source. If Amazon does that, but I don't think they have a plan to do it because
that's not how they operate. And so, you know, it's well within, I think I think it's, in fact,
I would say to recommend it for open source companies to make sure that they are able to, to, to build
a successful business, just like Amazon is building, just like everybody else is building. Um,
and so the, the motivation to make money out of your inventions is completely justified, uh,
all in, I would say, moral grounds, right? Mm-hmm. Well, there's a concern too, uh, at least
based upon Chase, uh, blog post, on the last exchange that Amazon, an AWS, wasn't putting
back into the open source buckets that I'll speak. So from two avenues, one, the perspective
you just share, which is DynamoDB, for example, is an open source, uh, and that's not part of
their business plan to do that. But then the concern and, as suppose, what led to this scenario
we're in now is, is essentially AWS not playing by the community rules. The license doesn't
depict this, and that's kind of what this move is doing. It's like, hey, if you can't operate
by community rules, then we're going to put a license that that makes it illegal for you to do
things in other way. So not pitching back into the open source name, but then you can sort of draw
some sentiment from just simply the titles of their blog post on the AWS open source blog,
back in 2019 from Adrian Croft, uh, co-croft, uh, keeping open source open, open
dishwasher for Lash of Search, which is something you mentioned. And then the second one is the
more recent around the Lash of Search, which is stepping up for a truly open source
of Lash of Search. It's an interesting perspective you've drawn there where they haven't
open source certain things they have because of business reasons. But then
wanting to be a good community player in these ways. It seems, I don't know, what do you think?
It is questionable, isn't it? It is kind of questionable. And I think like, you know, if you
look at SSPL, the server-side public license, I think from MongoDB, it's actually really,
it's, it, I actually, I'm still a bit baffled that it's not approved by OSI because it, to me,
is a, a fork of derivative of GPL, just like AGPL is, which also makes GPL a bit more
permissive, right? I, if you look at AGPL, it's, you know, allows you to not have to
release your source code. If you are using it over the network or something of that sort or
actually, I forget exactly the details there. But SSPL says that, you know, you don't have to release your
source code. If you are not directly competing by providing the core product as a service, right?
So it's more permissive than a GPL. And so I think it has all the methods I, I feel, in my opinion,
to be open source approved. And, and, and guess if, if SSPL in a world where SSPL gets open source
approval, I don't think we have any problem here, right? Then we, then, then everybody has already
sort of, like, gathered around SSPL, which, which we could not do around the, uh, common
skills, right? I mean, that was the same idea for common skills, but it could not get us there,
but MongoDB is a big name. And so MongoDB could get the industry around SSPL. And then we don't
have a debate because it would be open source, right? Yeah. There's some details around that we had
a conversation with Heather Maker on this exact subject and something she had said, which will be in
the same podcast is, uh, if you redlined SSPL versus AGPL, the primary difference is this sort of
come out is essentially section 13, which describes, you know, if you make the functionality of the
program or modify version available to their party's service, blah, blah, blah, blah, that's where
the changes is section 13. Everything else is essentially AGPL. And there is a lot of debate
uh, around the new ones and the process to be approved. So OSD is very clear. Hasn't changed
a long time. OSD being the open source definition. That's very clear because that's unchanged
and it's even derived from Debian's existing rules on what open source definition is. So there's
some history there, but the criteria and the ways that you go about getting these licenses approved
by OSI is a bit more difficult. And then you can read the transcripts and the notes from the
meetings and stuff, but that takes a very motivated use in this last reader. And so some of
this intention this show is to sort of, you know, demystify some of that stuff and maybe give you a
TLDR, TLD L, too long to listen, but you know, that's essentially is this criteria for getting it
passed. You say that the SSPL should be or could be open, so you're, you're baffled, as you said,
that it's not. Yeah. Yeah. And it has been approved by that. Yeah. And to be honest, like, I haven't
looked at the counter arguments to that right then. I'm sure there's there are smart people there
on on the side and they have some counter arguments. But from from a slightly like, you know,
distant perspective without having to go into the intricate details, it seems very similar. And
maybe if it was built in 1990, is it might have already been involved in OSI, right? But I
think one thing that that that we should pretty take away from elastic stuff is that the
holy grail of license here is to, so if you look at elastic license as well, right? It's
divided into two portions. One is the the open source part and the other one is the completely
proprietary part, right? And so proprietary part, they are not changing from my understanding,
they are changing the open source part of their code and making it available via either SSPL
or the elastic license. And both of them sort of in some shape or form disallow,
building a competing service, right? Right. Restricts cloud service providers from offering
this is quotes. Yeah. So let's say as restricts cloud service providers from offering our
service as a service. Right. And that's in violation of OSD six. And they are very clear about
it's not it's only to third parties, not for internal usage. So if I am a big company and I need
to build a product, I can provide it as service to my other teams in the company, just not to your
users directly, right? That's a commercial restriction. Don't compete with me, essentially.
Exactly. Yeah. Right. Because you can compete internally inside your own company,
not make any money from it, but get great usage of the software, but you can't create a
competing company, right, against the inventor. Yeah. This goes back to what you're saying before
the inventor or the user of the invention. Exactly. Yeah. And they can still build a commercial
product on it, just not a competing service, right? But the holy grail would be to offer a
single license, right? That that is that that takes away. Hey, this is proprietary part of the
code. And this is the quote unquote open source or similar to open source part of the code.
Ideally, what what looks like what they want to get to is to offer a single license that can
cover both their free and their paid features while being as open as possible, right? And that's
that's the if that would be there, like I think we would jump on it immediately, because we also
currently have dual license, which is what cockroach has, which is what elastic has and many
others have. But having that single license would be would be the holy grail. And I don't know if
you wanted to talk also about BSL, right, which is the MariaDB's license, where they say that
the initial code is going to be proprietary, but after a certain amount of time into five years,
it would become open source and it would become Apache to or something liberal, which is what
cockroaches doing, cockroach DB is doing. So they're open source, they switch to cockroach BSL
modifications, like that's also a great way to essentially say the same thing, right, which is
please don't compete with us by providing a service, which is providing a service to our core
product, right? And if you think in terms of what's the core product for Amazon, let's say,
let's say like EcoMurse is the core product and if you were to use Amazon machines to
or Amazon technology to actually build a computing stuff, I believe they'll be pretty pissed as well.
And so all this comes into that doing is that we have spent a lot of time in effort into building
and this is our main source of, source of living, right, let's just play play nicely,
right, otherwise we have to invent new licenses. Yeah, they have accramed her shirts with
a sentiment on that subject because century was licensed BDS3 and transitioned to the BSL and I'm
paraphrasing, but what I can recall from that conversation episode 371,
realizing century was essentially, Dave was saying, I want to do whatever it takes to help me run
this commercial business, but also respect open source because without the business making
the thing, there is no thing. And that's a paraphrase of, yeah, Dave is sentiment on that,
but that's essentially what he pulled it down to was his concern in regards to transitioning away
from BDS3 to the business source license, which you mentioned. Yeah. And actually, if you think about
what is happening, right, like, you know, I mean, again, I argue that SSPL is very close to open
so to the, to the, to the HPL or GPL, right, but SSPL is not open source. So what's actually happening,
right now is a bunch of open source companies which truly believe in open source are having to switch
to a court and court non-open source by senses. And that's not, that's not great, right?
Yeah. And that's not great. And the funny thing is they are all talking about the same one player
in the market, right? They're not talking about about a Google or about a Microsoft or anybody
else. In fact, in the plastic blog post, they mentioned that they have played very nicely with
all the other players in the ecosystem, just the, just the, just the AWS, right?
So I have no perspectives. Yeah, exactly. I mean, I have no personal thing against it,
unless, right, like, we, we don't really have to be a completely fine. And from what I understand,
they're not trying to build a degree of alternative, right? But it's, there is something there,
where if a bunch of companies are talking about the same, you know, court and court,
be a curious actor. Yeah. I don't want to say a bad actor, right? Because exactly,
because they don't know, but, but a curious actor, I think they must be something they're right.
Do you think then, given that we had just said that the OSI, that it's in their best interest for
open source to help these businesses that have this concern, have this trouble to create
an open source license that give them the needs they have to, to sort of solve the needs they
have, these problems. But also adhere to the letter of open source, because if you look at
the intent, it seems that they're intending to respect and live within a world of open source,
whether it's for the, in quotes, open source of brand name that can't be trademarked,
because it's not trademarkable. But it certainly has a market ability to it. Like, if you,
if your mask rate is faux, faux open sources, that right, Jared, faux open source? That's right.
Then you're not open source. And, but there is a, you're far as a market ability to
saying your open source. Absolutely. Yeah. Absolutely. And I think, you know, we do open source,
because it allows, it's, it's not just a way to, to have more eyes and make sure that the
product is, the, the score is of high quality and so and so forth. But there's also, it's a distribution
model, right. It's a distribution model. It's a way by which you think your software could be consumed
by anybody, without necessarily having to pay you, right. And again, they're not saying that if you
build a commercial, it's a successful product using our software payers. They're not saying that.
They're just saying like, just don't build a competing service against us. And, and also,
I'm going back to the first, the, the, the initiation of a bunch of these open source companies,
it started with like, one or multiple like people who just believed in open source, right?
They, they just wanted to make things, you know, open source, because they have consumed open source
software their life, right. So when I was like in college, I was all into Linux and I was playing
with Gen 2 and Ubuntu and I don't know, like whatever other Linux play where there was out there,
free BSD, net BSD and I just believed in open source. And that was our stance against, you know,
Windows at the time, right. And so I've created multiple projects, some of which actually got popular,
including DeGraph, and then we had Badger and then we have this try to, and they are all open source,
because we just believe it. It's right. It's a bit of like a pain to have to move away from that,
even in theory, right, even in theory, just because of this, this one problem.
So Manish, clean slate, start de-graph over today, same exact software, same business,
pickle license. I love it. What are you going to go with?
I think SSPL is looking pretty attractive. SSPL is looking pretty attractive right now and also like
just just not it's one more thing, right? From 2010 or 2015, the world has changed to be more
cloud first and own prem later than own prem first and cloud later approach, right? And so
if I were somebody else were to build a service today, they might choose not to even make it open source.
They might say, you know, what's snowflake has done really well by being completely cloud-based
system. And if I'm not wrong, snowflake is not open source, right? And so, so why open source,
right? Maybe that could be the question is like, open source already has tons of problems,
because there is, you know, actor or multiple actors, like causing so many issues, like why
bother with all that, just avoid all of that and just go a completely low source.
And you could still build a good business out of it, right? And so that then it becomes
just a question of principle, right? Do you still really believe in open source? Do you still
believe that your court should be, we should be other people should be able to check it and
make sure that you're not doing anything fishy or help you find bugs or, you know, that cannot
stuff. So it becomes a matter of principle and a matter of business. It seems like this episode
of the Change Log is brought to you by Render. Render is a unified platform to build and run all
your apps and websites with free SSL, a global CDN, private networks and audit employees from
Git. They handle everything from simple static sites to complex applications with dozens of microservices.
If you're a developer or a founder that's frustrated with AWS's complexity or Roku's high costs,
you owe it to yourself to use the $100 in free credits that are giving our listeners to give
Render a try. Render is built for modern applications and offers everything you need out of the box.
One click scaling, zero downtown deploys, built in SSL, private networking, managed databases,
secrets and configuration management, persistent block storage, and infrastructure as code.
The Roku customers running production and staging workloads typically see cost reductions
of over 50% after switching to Render. Here's the best part. We work close with a team at Render
to ensure you have zero risk. By giving you $100 in free credits, plus they're going to assign
a world-class engineer to your account to offer guidance and answer any questions you have.
When you're ready to transition your infrastructure, they'll be there to help you with that too.
Automate your cloud host with Render at Render.com slash change log, get $100 in free credits
to try the Render platform, plus a world-class engineer assigned your account to guide you along the way,
to send an email to our special email, changelog at Render.com to get access to those free credits.
All that begins at Render.com slash change log.
Coming up in this segment, we're talking about Paul Dick's co-founder and CTO at Influx data.
Paul shares his perspective on running an open source business.
How Influx data is innovating their commercial offering,
while having a permissive MIT license version of InfluxDB,
Paul also shares his thoughts on this standoff between the last deck and AWS,
and why he's long on Mongo and short on Elastic. Here we go.
Swip all tell us, tell us your name, tell us your company and your view of the open source
world where your opinion is coming from.
Yes, on Paul Dick's on the CTO and co-founder of Influx data,
where the makers of InfluxDB, which is an open source time series database, I created it in 2013,
and I've been initially running the company and then a CTO, which I'm still doing to this day.
So my experience over that time has basically been trying to build a business around an open source
software project, particularly in infrastructure software and in databases in particular.
So Elastic, obviously I'm very familiar with, I saw it when they were initially becoming a company,
I remember the project early on, some of the work that they've done was served as inspiration
to me as I was building out Influx and the various parts of our stack.
Very similar software, very similar business model, it looks like Influx's MIT,
can you tell us your license selection and how your business works around it?
Yeah, so all of the open source software that we create is MIT licensed,
and our business model is basically, so we are essentially at this point in open core business.
So there's open source InfluxDB, which is MIT licensed, people can do whatever they want with it.
It works essentially as a single server. We have a fork of the open source project that is close source
and proprietary if you want high availability or scale out clustering of InfluxDB,
that is our commercial offering. So essentially we don't put clustering features into the
open source. Everything else is fairer game to go into the open source. If it has to do with
the single server, optimize the query performance, API, functionality, all that kind of stuff,
it goes into free open source. So we launched to this as a managed service inside of AWS.
In I think it was April of 2016, we launched it as basically like on-premise software product
that people could buy in September of 2016. Our AWS service is still running to this day.
Essentially what that is is it's the close source software spun up, a customer can come and sign up.
They say what size instances they want, how much storage, how many instances we spin up the
close source enterprise version of our product on it. We add monitoring and backup since stuff like that.
And then that's the host version of the product. The one I say on-premise version is essentially
you buy the software from us. It's an annual subscription and then you run and manage it yourself.
And that's either in your own data center, but plenty of people are also doing it inside of
AWS, GCP, all that kind of stuff. Last year or I guess late 2019 now, we launched basically version
two of our cloud product and that essentially is it's a very different kind of thing because it's
not just a database and it doesn't look anything like the open source software that we create.
The API is the same, but the underlying architecture and how everything works together is completely
different. And that's for version 2.0 of InflexDB. So the model we switch to with 2.0,
we essentially move to a cloud first model. So we deliver that cloud products continuously.
It's like a SaaS service and then over time some of those features get pulled out into the open
source InflexDB. Is that because of a realization that the other way wasn't working well enough
or it's just why do you switch to the cloud first model? Mainly because it has nothing to do with
open source versus closed. It has everything to do with software delivery cycles. So before we
look very much like an enterprise software company, we'd have anywhere from two to four feature
bearing releases a year, which could then get shipped to our cloud customers and shipped to our
own promise customers. The problem with that is you don't get that many cycles of iteration
and each release is like super painful to do because there's so much code wrapped up in it.
So I really wanted to move to a continuous delivery model. So we'd get much faster feedback,
features out to customers quicker and the individual releases would be much much smaller.
So that had to do with basically wanting to be a cloud company and deliver a cloud product
as opposed to deliver like a package on-premise enterprise products. How does that trickle down
to Europe and source then? How does InflexDB the open source benefit or not benefit from this
switch? I think the benefit is that by the time something lands in open source, we've already
vetted the features embedded like its functionality and how it works inside our cloud products.
The things with our cloud product were able to iterate on it and release fixes very quickly.
Once you ship something in an open source release, it's much more painful to ship a fix,
ship an update. So I think that's a benefit. The drawback is it's less, I think it reduces the
collaboration with the community in terms of what we're developing and how it's getting done and
all that kind of stuff. It basically makes like the open source like a downstream kind of product.
Well, it reflects the tweet you put out which is my own preference as to keep open code permissive
and open and have a clear strategy as you just depict it here with how that code will be used
in the commercial offering. So you're eating on don't for which is good. So yeah, so there's
what I just described is basically the LR2.OModel, but actually I'm actually trying to move even
beyond that over to what I call basically like complimentary software model, right? So we have a
new project that we announced a few months ago called InbloxDB Iox, which is basically the new
core of the database written in Rust using Apache Aero. And the way that we're building this out
is essentially there's the open source thing and then there's another piece of software that we
have that is closed source and as a whole the system is designed to be two pieces of software.
One of which is totally open and permissive, permissively licensed, you know, you can do
whatever you want with it. You can compete with us. That's fine. That's by design. And then the other
piece which is the software that we're writing to be able to run the open source software in our
cloud offering. So the reason why I say it's complimentary is because what I want is I want our cloud
product to be running the open source bits exactly as it's like exactly as the open source community
experiences them because it means we'll find bugs faster. It also means we can have more of a
collaborative effort with the community in terms of making improvements because we're not like
right now with our cloud too offering. Like InbloxDB 2.0 open source is one project.
Cloud 2 is totally separate. Now we use some of the libraries from InbloxDB 2 but it's not like
it's not even like a fork of the project. It's literally two separate projects and products
and they have like the same API. Yeah, two masters. Right exactly. Yeah. With with Iox and
sort of serving two masters. What I mean like literally you're serving two masters. You have
two different projects. It's very difficult to serve both easily. Absolutely. And like internally
we have a separate team that works on the open source bits versus the people working on the cloud
closer. Cloud products. Right. I actually benefit the open source and it seemed like the benefit
the open source was obvious but they're different because they're separate. That's what it
seemed like. I was going to ask you about that because it seems like with your cloud too that you mentioned
you can obviously push forward but it's downstream. The open source is downstream and it seems like
maybe you know just disconnected basically. Yeah. Yeah. It's a bit disconnected. Whereas like with this
new model again like my goal is so we offer it as a cloud product first. That's we're not doing
that yet. But then later we'll offer it as an on-premise products. But the idea there is that
people who adopt Iox and you know deploy a bunch of servers and stuff like that. If they come
to us and they want the on-premise product it's a product that they add in addition to the open-source
software they're already running. Right. They continue to do that. It's a very, very different than
our old influxdbw1.x enterprise model where our enterprise product is a replacement for the open
source influxdb. I think that's like a heavier lift and it's a bigger ask for users to replace
their open source bits. It's better. I think it's better if they're able to run the open source
bits and continue to have that experience because one it makes the contribution easier. It makes
it easier for them to consider adopting a commercial product because at that point they're saying like
okay I have this commercial product but it's not like I'm still using the open source bits. So I can
still be sure that if the commercial relationship goes sour or I decide I want that functionality
it's still good. I can still continue to use the open source bits. There's nothing so interesting
ramifications that I think I would love to see play out as you as you go about deploying that
new idea. In my understanding correctly it's kind of like the open source bits is like the
core software offering and then the proprietary stuff is like like a management controller or
like a deployment type of a thing like it's all the things that surround it that you would be
offering as a service perhaps but this is as a licenseable addition. Yeah that's a good way of
thinking of it. It's so yeah we it's basically all this code that we have to write to offer it as a
service. Operations, backups like deploying new versions of it, management, all this kind of stuff.
The other thing is we want to be able to offer that as an home premise piece of software.
Another way to think about this is Iox repres- the open source thing represents the data plane
whereas our closed source product represents the control plane but the way the two interact is the
control plane interacts with the data plane through its public API and that public API is open source.
So literally if somebody wanted to write an open source control plane for it or if they wanted to
write their own competing software products they can do so and the license totally permits that.
Yeah and the thing is like we don't have to worry about our open source bits competing with our
commercial bits because the truth is like the the responsibilities of the two pieces of software
are clearly delineated so it's like there's no reason for people to put control plane
plane bits into the main open source project. They would have to create a separate open source
project to do it which would make sense. All right but that point you're kind of just deciding
what is control plane and what is data plane and that's kind of the same concept of like what
goes in core and what goes in proprietary isn't it like what about backups? Well I could go
right into our core offering but it's more of a control plane kind of a thing so we'll put it over
here it seems like you still make those decisions you just make them and the two pieces of software
are further apart perhaps. I view them as further apart. When I think of open core businesses
I think of businesses where the commercial product is a replacement for the open source products.
This this is not that and it's designed specifically not to be that like take data
stack for instance. Data stack center prize is a replacement for Cassandra right and now like
data stack is obviously offering it as a service called Astra that's doing well but again like
that's an open core model. Cassandra I think I think I think a good example is like Google and
Kubernetes right like Kubernetes opens our Kubernetes certainly doesn't represent the entirety
doesn't represent the entirety of GCP and all the software that runs that but like obviously
Google has a vested interest in you know driving Kubernetes forward and GCP happens to be like
one of the best places to buy Kubernetes to operate Kubernetes. So what's your thoughts on the
the service type public license and elastics move? You obviously prefer this other way going about
it but you think it's smart by them short-sighted what what you're taking on that. So I don't think
it's not the move I would make and you know to be totally honest though like to me it's not
really about a licensed choice it's more about how they intend to drive innovation that drives
you know commercial value and the truth is like I own stock in MongoDB which is obviously
SSPL license software but I do not own stock in elastic nor would I buy stock in elastic right now
yet I'm holding MongoDB right even though they they're both SSPL so like from a pure you know
mercenary investor perspective I'm long Mongo but I'm short elastic and it has nothing to do with
the license. I think then changing the license is more a symptom of the fact that they're getting
out-innovated on their cloud offering. If they had a cloud offering that was demonstrably better then
Amazon's elastic service they would continue to be able to drive revenue and drive people to it.
If they are so upset because they feel like a last or sorry AWS is eating their lunch on the
hosted offering then they you know they changed their license like I mean ultimately like they
had a choice which was they either write more close source code or they relicense their you know
they they they continue to write code out in the open I'm putting airports around this but that code is
under a different license they chose the different license path which to me I think I mean personally
I'm not a fan of source available licenses I think they're a disservice to the community because
because then they are disservice to the community because then you can say like oh community
members like saw your code or whatever like it just means that people can't start like competing
projects with you without you know putting themselves at risk of being you know accused of taking
your code or whatever right like I prefer open code is open closed code is closed and
the the thing that kind of annoys me about the whole elastic AWS stand off is both the
them are trying to you know put forth this position that they have you know more the moral high ground
they're you know they moral superiority over the other one right like Amazon saying like oh
word protectors of open source so we're going to launch this fork or whatever and the truth is
like even when they did open distro I called it a fork then even though they said it's not a fork
because just like whatever a build it was all it was always obvious like when they launched that
that fork is what it was ultimately going to become because elastic was going to take the stance
the Amazon stealing from us so we're going to change the license a more and more of our code
which is then going to give Amazon no choice but to fork right so Amazon's claim they they have
the moral high ground it's not true like they just they're just doing what's best for their
customers and they're sure shareholders right they're trying to optimize shareholders value
and obviously like all their customers are saying like host elastic for us and then
elastic is trying to say like oh we're doing this to protect ourselves from Amazon because they're
stealing from us I mean the truth is there are tons of hosting companies them into hosting elastic
for a long time and if you look at where elastic makes this money it's probably mostly from
long search how many log search companies are built on top of elastic and they just open that up right
like so it's their elastic is just upset because Amazon out competed them on the hosting front
whereas like other hosting providers like compose an avian and stuff like that didn't really make
a dent in the last top line right so they're claim like oh we have to do this like no you
don't you could have kept the code Apache B2 and you could have like written more and more code
in your service offering that's closed source and kept the two separate right and this is
actually one of the things that I agree with Amazon about where they said the reason they created
the open distro was because elastic was polluting the open source repo with code under different
licenses right under the elastic licenses stuff like that and what they've done now is they've
gone all in on that strategy so basically like if they want all the benefits of being an open source
company you know free marketing free adoption getting other people to talk about it use it whatever
but they don't want to pay the price the price of being overly open source is that you're giving
software away for free yes you're being permitted but that also means that anybody can take
your software and compete with you would you have to be okay with like any any anything that you
can really call platform is only a platform if the total economic activity of it outstrips
that of any single vendor right so if you claim your platform but basically you're getting all the
money from it no you're not like you're monopoly as you said in your tweets right this comes
back to something you were saying which in your stance for not 2.0 in terms of influx what you're
doing but the next version I think you called it Iox this maybe version three I'm not sure
what you call it but you said by design it's a permissive and you designed your architecture
in terms of commercial offering to expect other competitors whereas it seems like elastic
based on what you say and others have said and even kind of what they're depicting is that they're
upset that Amazon is either lunch and it's not by design their model is not by design to be
competed with right exactly like their their hope was that they would get this massively popular
project which it is elastic is top 10 database project right like used the world over
but then they want like the classic strategy is like you spend a bunch of money to get
optimized growth and then once you have scale and a monopoly you want to start collecting monopoly
rents right so now elastic can't collect monopoly rents because other people are roasting
elastic they're so they're trying to change the model so they can do that but the problem is like
then you're a different sort of business entirely right like it's fine to be a close-source database
company there's fauna which is new firebase is close-source like the clap each of the cloud
providers has a handful close-source databases and that's a totally fine thing to do but
to try and say like oh we're open source and and then change it it's just like yeah that's kind
of ridiculous we'll pull fascinating stuff thanks for sharing your your take with us definitely
want to come and have you back once you've rolled out this new what you call complimentary model
yeah some real world results to report back how it's going if it's serving the needs of
you and your users and the open source community the way that you hope it will
will love to have you back on the show yeah I think that's just one closing thought on that
really quick which you reminded me of which is like I think for people to think about it can
open permissive open source licensing survive and infrastructure software I totally think it can
but I think the people who are producing it have to think ahead of time about how they
commercialize it over the long run and for us with Iox I've already defined what success looks like
is tons of competitors literally cloud providers adopting the software and competing with us so
what that which isn't going to happen for years best case scenario right if it happens at all but
what that means is we are developing a commercial products side by side with the open product
right now so that if cloud providers decide they want to get in on the game three years for now
we've already had plenty of time to actually build a product to you know compete
stay tuned for results as they come out thanks Paul really appreciate you coming on the show
all right thanks guys
next we're talking with Vicky Bersourer Vicky has been in free and open source software for
30 years now and she's been working with startups and enterprises doing open source
and free software business strategy for quite a while we use Vicky's post titled elastic search
and kabana are now business risks as a reference on this situation we even quoted her post a few
times in our conversation with Heather Meeker so naturally we had a doctor here we go all right
so here is Vicky Bersourer and Vicky share with us first of all your position in the open source
world like what you're angle at the conversation that we're coming from. I do corporate strategy
around free and open source software so I work with startups and enterprises and various
organizations to help them be more successful by contributing releasing and just generally
becoming a good citizen in free and open source software communities in a way that's both good
for their bottom line and for the communities okay and you've been doing this for a while
yeah I have I've been free and open source software for over 30 years and I've been doing
this specific thing for yeah quite well now awesome well glad we got you on the show then
so you wrote a piece called elastic search and kabana are now business risks
and when she lay out the case for that headline do you want to share that with our audience
just the the brief synopsis of why you believe that's the case with this service type of
license well I mean SSPL I'm going to lead to the lawyers this is a legal matter but it is
not an open source license it is however being portrayed as open which everybody is going to
interpret as open source because that's just the way we speak about things so I think that
in and of itself is kind of deceptive and that's a problem but the bigger problem is that this is
a license change and if you are going to use something you are agreeing to that license
if you upgrade elastic search or kabana to I believe it was 7.11 if I recall but if you upgrade
you are tacitly or otherwise you're agreeing to this new license as a PL or elastic license
it doesn't matter you're agreeing to that and you are taking on new obligations for your company
for your organization are you aware of that do you know what you're taking on do you know
the potential risks you might have or maybe there are benefits I don't know but this is not
something that you as a company can afford to ignore because it can have huge ramifications to your
code base I see so like the side swipe is a big problem the fact that so many people might
upgrade and unbeknownst to them there are agreement with the software that they're running and the
companies involved has changed is there no transparency to that change is the is it not something
that people are aware of or how does it how does it um the only transparency really is going to be
that blog posts or I guess there's like two blog posts now with the elastic finger wagging it
Amazon and also screwing over their entire community and ecosystem but hey that's their strategic
decision to make they seem to think that was the right move for them more power to them
yeah that's really the only warning um your otherwise not going to know as far as I know
I haven't obviously looked at the code um but it doesn't make any sense that there be some sort of a
new click through on elastic search and cabana for instance um as you're installing the
monitor server how are you going to confirm that yes I have seen that there is a new license
and yes I agree with this new license nobody does that not for open source software and especially
not on the server side um so it's very likely people are going to upgrade and
tacitly agree to this whether they know it or not or maybe they know about this new license
and they decide not to upgrade at all well now you're not getting security updates to this software
to elastic search to cabana that's another potential risk to your company um maybe you're using
these things for free and a great deal of people build a lot of cool stuff on top of the elk stack
there's a reason why there's an acronym that we all know the elk stack it is that popular so a
lot of people are building on this and they might be building on the free version um well that free
version is not going to get relicence in your going to be screwed but if you are building a company
on top of this open source software and your company relies upon it and you're not already paying
for some sort of support either from elastic or someone else you're also putting your company
at risk in that way so there's a lot of really important strategic things that people need to be
considering when they are selecting open source software and you need to be remain aware of your
entire free and open source software supply chain because as we are seeing right here it can shift
out from under you you can have license changes you can have security problems you can have
maintainers who just you know piece out and they go away and suddenly are using something
that's completely unnamed-tained so there's a lot of risk there for a company and most companies
I've worked with are completely unaware of this and it's it's potentially a disaster waiting
to happen I mean as we all know this is what happened with um oh that credit reporting thing
starts with an e- e- quecto fax double facts thank you now I've been saying elastic so often that's all
like you can do. That's the only eating you're here for you.
Exactly, thank you guys. Yeah, that was, that was, that was, that was not paying attention to their
open source software supply chain. You know, they had a piece of software in there. I believe
it may have been Apache Struts or something like that. That had been upgraded to fix a security
whole, but they hadn't bothered to upgrade it internally because they weren't paying that much attention
then they got compromised and billions of people had their private information stolen.
So if you're not paying attention to stuff like this, not only elastic, but the larger picture,
you were just one bad day away from being the next aquifax. Do you want to do that?
Is there a right way that Elasta could have done this in terms of just forget the decision
the SSPO, but like let's say I just wanted to change my license. Is there like a correct
yet to like start a new project with the new license? Is there like a best practices for changing
a license that doesn't sweep out the rug from people potentially? For an open source project,
there's obviously many different ways you can do it and Elasta has their perspective,
which is going to become from a very, you know, corporate perspective. We're looking to make money
and then the community will be coming from a different perspective. So you can have different
approaches, but the one thing everyone should always do is be communicating with their community
and their ecosystem. This cut everyone by surprise. That shows that Elasta is not respecting
the community and the people who have been contributing and who rely on this software. So they
have essentially looked at their ecosystem and said, yeah, you don't care. We don't care what you're
doing because all we want to do is screw over Amazon and collateral damage be damned. So they
should have communicated. They should have told people this is going to be coming. Maybe they should
have done it for instance at version 8.0 rather than version 7.10 to 7.11. Yeah, go to a major version.
Maybe that would have been smarter. Maybe cut a major version right there. Just do that.
Maybe you could have forked it internally and start developing internally and then leave the open
source project alone for other people to build upon and you can even, you know, push stuff up
stream and pull stuff downstream. You can still benefit from that while having your proprietary
internally developed software. You can still do that. I mean, there's lots of different options
they could have done, but the one thing they should have done and did not it was communicate
with their ecosystem, with their community. They pop this on everyone and it was kind of rude.
They've violated the trust of their community and that you can't really get that back at this
point. So you kind of screwed the trust of your community and you've dismerged your brand
which is going to be incredibly difficult to fix. It's a somewhat too long, it's credit and
maybe I'm wrong by even saying this, but it seems like they've gone through a lot that when
Shay had mentioned the CTO of elastic mentioned the litigation and the behind-the-scenes discussions. I
think from the asset it might be easy to say screwed over, but the nuance there I think is they've
gone through a lot and maybe they're in some ways quite wrong and reactionary, but I'd say in
some ways at least depicted by these tweets and this post, maybe we're in a bad at wrong, but
their intention was to try to fix this problem which is very difficult to fix because our promise
of licensed license does allow this competition and maybe from a business standpoint they've
sort of hit their links with being able to take that in quotes, their quotes at least abuse
from Amazon and they're just trying to tread water to some degree with the scenario.
I know that this is a podcast since so people can't see me, but picture me rolling my eyes right now.
Okay. So the trademark thing aside, that's a different matter that lawsuit for the trademark is
a separate issue. If they are elicensing as a reaction to that, then it's essentially them
stamping the little princess foot taking their ball and going home and it's a childish reaction
to a trademark infringement lawsuit, which I do think that they are totally justified in that
lawsuit for their trademark infringement against the Amazon. I have absolutely no problem with that.
I do think that Amazon was rolling the dice on that one and they lost and I think they will lose
and in that particular trademark thing, but I am not a lawyer. So that's just my
attitude and legal advice. That's just your take. So but the relaxing thing, you know, if
they screwed up at the very beginning by not understanding what a permissive license allows
and what that is they screwed that up. They put it out there under a permissive Apache II license
without thinking somebody can now build a better product offering on top of this.
Very easily and if they're building a better product offering than we are, I'm sorry folks,
we live in a capitalistic system. That's just the way these things go. It's your fault for
releasing your intellectual property under that sort of license and not understanding what it's
going to mean and if you did understand not taking enough measures to make sure that even if that
does happen, you can still be successful. And frankly, if you look at their numbers and their financials,
they are doing quite well. So what are they looking to do? How are they going to
looking to grab all these people who are using the Amazon ecosystem and move them over to elastic
search and to elastic? I don't think that's going to happen from a market perspective.
So it's very difficult to see strategically why they thought this might have been a good move
to just give their entire ecosystem the finger while trying to take a shot of Amazon. It just
kind of seems, I don't know, amateurish and I would have expected better of a company that's
been around for this long. So let's say I was a happy elastic search user a month ago and here I
am today and I'm like, Vicky, what do I do? The change of license on me, I don't know what to do.
Do you say, what do you say to that? Go to the Amazon fork or? I will say, I don't know it depends
course on I have been known to do a fair bit of consulting and so any consultant who isn't
starting up with it depends is, you know, trying to sell you something. All right. So it totally
depends. What are your needs? How much do you rely on that elastic search or on that cabano?
We have to remember there are two really big projects here that have been realized since it's
not just elastic search. So what is the strategic value and the architectural value of that piece of
software to your product, to your company? Look at that first. What is the niche it is filling
and then will anything else fill it? And it could be that as you evaluate this and you look at it,
it makes sense to just pay elastic for their software. Fine, that is a value choice. Nice support
you doing that. I want your company to be successful. But you might also find that there are other
alternatives. There are a couple of forts now. As we all know, the thing that kicked all this off
which is Amazon's open distribution for elastic search from the last time and elastic search
did something kind of goofy in their open source world. And then there's they have their new
totally open distribution that Amazon just forped. And I think there's a third one which is from
love. I don't like that. There's at least one other version out there. They're maybe others.
And maybe you don't need elastic search at all. Maybe you just need Lucine. You know,
if you use a kebana, yeah exactly, maybe grapana would be better for you. I don't know.
It depends upon your needs. Don't go doing something just because of what everyone else is doing.
Look at your needs, your company, your architecture, your budgets, your staffing, who knows
what software do you have to ramp up on something new? There's lots of variables in there.
So I can't get a one-size-fits-all answer. I also want to just ask you once and the whole community
could just listen to you, you know. Let's multi-cast this solution.
No, there is no single solution to any of this sort of stuff. Because every one of these
companies is going to be different. If they were all the same, then we wouldn't need them all, right?
We'd have one market, one company, boom, you're done, but we don't have one license. One license.
Gosh, wouldn't that be, oh my gosh, that would be so easy though. It's so nice.
But that's not what we do. We wouldn't need a consultant at that point.
Well, yeah, but I do corporate strategy. It's not simply a license thing. It's about so much more than that.
That's just a tiny slipper. Well, if you want to respect your time, is there anything else that
you want to share that we didn't ask any questions that you just want to put this out there that
we have an ask you a question to at least? No, not really. I think you've covered pretty much
the highlights of the stuff and it'll be interesting to see what others have to say.
Yeah. I don't typically listen to podcasts, but maybe I'll actually listen to this one.
Okay, there we go. Well, you might hear me thank you at least once before I think you're right now
for your time, but thank you really for your time and for this blog post that you shared. It was
very helpful for us to sort of get a different perspective on these concerns around up and
source, quoted a couple of things you had mentioned in your blog post in the conversation with
Heather Meeker, which is a part of this show too, but thank you for your post and also today
think of your time. We appreciate it. Absolutely. Thanks, gang.
Last up on this epic show is Marcus Stingvist, who's self-describes as an everyday
web developer from Sweden. Let's do this. Please tell us who you are and your vantage point on
this software world. Yeah, well, I'm just normal every day web developer from Sweden.
Awesome. My name is Marcus. So I work for a small company. No one has heard of? Yes. Yeah. There you go.
Yeah, exactly. How did you first hear about the news of Elastix,
re-licensing just curious? Where do you get your info? Yeah. Well, I read our article from Elastix
on Hecken use. So I saw that I'm posting like this is not a K or something in those lines.
Awesome. Well, we're gathering perspectives from all over the community. So it's awesome to have
just a regular everyday web developer here on the show. So welcome. And yeah, what do you think?
What are your thoughts on the whole situation? There's lots of nuance, lots of in-lots of out.
Yeah, exactly. Exactly. Yeah. Well, I read a lot of comments and I read the Amazon
article as well when they posted about like forking the report after they realized
since Elastix. And I really don't even use Elastix or Amazon web services that much. But I think
I care a lot about open source in general. So I'm with you. I don't use AWS. I don't use
Elastix. I also care a lot about open source. What is it about open source that you like or that
you care about and are trying to preserve or be a part of? That's a good question. I think it's
the matter of fact that I can use stuff for free and like charers with colleagues and
people all around the world without any restrictions. And no one's like can forbid me
for using stuff which I want to use. So when you first heard about the relicens to the SSPL,
what was your hot take? What was your emotional reaction? Were you in different,
were you mad at Elastix? Did it feel like it's no longer open source? Or do you still think it's
still in the spirit of open source? I think I'm actually very much on the Elastix side for me.
I saw a lot of comments on how can you use that word like Amazon is all in the rights and
the other. But they haven't actually done the same with MongoDB a few like two years ago,
I guess. Right. Where they pushed them to basically relicens because they simply don't want to pay
a yes therapist. I think Amazon could
could be a bit more friendly towards those open source companies. And because right now when they
just use their products for free and maybe they hurt the possibilities of future open source
companies coming forward. So if you were an Elastix user, Elastix search user?
Yeah, I have been in the past. You haven't, but if you were today, like when you read the
relicens, you would have been pro elastix. It was not a concern to you or offended you or
changed the way you looked at Elastix search. Well, I think it's sad that they have to do it,
that they have to relicens, that they feel like they need to. And that's what makes me think
that their movie is kind of okay anyway because I will still support them and I would rather
use them than fork created by Amazon. Yeah. So the fork still exists under the new fork,
which is created by Amazon and trying to carry on from that point forward. I think it still exists
under the previous license, but you would continue with Elastix versus the Elastix search
and come on a fork that are run by AWS now. Exactly. And that's simply because I believe in
their vision or I believe in their product. And I think Amazon is going to have a hard time
keeping up or maybe they won't, I'm not sure, but time will tell on that. Yeah, time will tell
out, of course. But the same goes with MongoDB and they're documented to be, I guess.
I still think MongoDB is a superior choice just because it's their project and their
derivation. So you're not an open source purist then? Not at all. Not at all.
More pragmatic. More about free and open and available. Have you thought about any of the other
licenses like the source available licenses? Are you cool with that? And these other things like
business source licensing, surely these are things that you've read about being in the open source
world, are these things that you're also just like whatever you want to license your code as if I can
use it for free and contribute back somehow. It's cool. Yeah, I think it's cool. I like every
little license is their own choice. If you want to license your work in a certain way, it's your
choice. And if you want to share your work with others, that's just a positive thing.
And I feel in this case like Amazon is hurting the possibility to do that. Awesome. Any of the
other thoughts? No, I think you people that are on Amazon side should maybe read article from
Frederick Lordenée, Lordenée or something like that, which is like on TechCrunch called
AVS gives open source to middle finger. I think that's our article that sums up my views pretty
well. Awesome. Hand that off to me and we'll include in the show notes for everybody. Yeah, sure.
Appreciate you hopping on and sharing your opinion with us. Yeah, thank you.
Alright, that was an epic episode. Thank you so much for tuning in. If you haven't heard yet,
we have a membership. It's called Change Log plus plus because hate why not increment things.
It is better as they say. You can subscribe at changelog.com slash plus plus get closer to the
metal, make the ads disappear. And of course, support all of our podcasts. Again,
changelog.com slash plus plus. And of course, huge thanks to our partners,
Linnode, Fastly and Lunch Darkly. Also, thanks to Breakmaster Cylinder for making all of our
awesome beats. And of course, thanks to you for listening. We appreciate your attention. We appreciate
you listening. And one more step you could take is to join the community. Changelog.com slash
community. It's free to join. Come hang on with us in Slack. Call this place your home.
Changelog.com slash community. That's it for this week. We'll see you next week.
