This week on the James Law, we're talking about the recent falling-up between elastic
and AWS around the reslicensing of elastic search and cabana.
Like many of the community, we've been watching this very closely.
Here's the TLDR for context.
Last month, on January 21st, elastic-poseity blog posts showing their concerns.
With Amazon and AWS misleading and confusing the community saying quote, they have been
doing things that we think are just not okay since 2015.
And it has only gotten worse, end quote.
This led them to re-licens elastic search and cabana with a dual license, a proprietary
license, and the server-side public license, also known as the SSPL.
Of course, AWS responded two days later stating they are quote, stepping up for a truly
open-source elastic search end quote and shared their plans to create and maintain forks
of elastic search and cabana based on the latest ALV-2 license co-basis.
There is, of course, a ton of detail and nuanced beneath the surface here, so we invited
a bunch of folks on the show today to share their perspective.
You'll hear from Adam Jacob, co-founder and board member of Chef, Heather Meeker, open-source
lawyer, and the author of the SSPL license.
Manish John, founder and CTO at DGRAVLabs, Paul Diggs, co-founder and CTO at Influx Data,
Vicky Bursour, open-source, and free software business strategist, and last, but not least,
the markets think this, and every day, we've developed it from Sweden.
Huge thanks to our partners, Linode, Fastly, and Lunch Darkly.
Linode is our cloud of toys, check them out at linode.com slash change log.
Our bandwidth is provided by Fastly, check them out at Fastly.com, and our feature flags
are powered by Lunch Darkly, learn more at LunchDarkly.com.
Linode is simple, affordable, and accessible cloud computing the developer's trust.
Linode is our cloud of toys, we trust them, and we think you should build anything you're
working on, a fun side project, or that next big infirmive of work with Linode.
The best part, you can get started on a Linode with a hundred dollars in free credit, get
all the details at linode.com slash change log, or text, change log to 474747, and get
instant access to the hundred dollars in free credit, again, linode.com slash change log.
What's up, welcome back, we have an awesome show today, we're here to get community
reactions around the elastic versus AWS situation in the SSPO license change of Elasticsearch
and Cabana.
Elastic relations with the SSPO, and there's a few people on this show that believe they
went about that license change the wrong way, but this is not the beginning of the story.
This conversation has been going on for a while, in fact, Adam Jacob brought the subject
of Elastic and AWS on episode 353 of this show, on that episode we talk with Adam about
the war for the soul of a resource, and the title of that episode could not have been more
prophetic to kick things off or going back to that conversation with Adam for context.
Adam is co-founder and board member of Chef, and we're talking about business models and
how they correlate to open source business models, and how from Adam's perspective,
the AWS's, the Azure's, and the Google class of the world, they provide a humongous marketing
funnel for open source businesses like Mongo Analystic.
Here's the conversation with Adam.
What's up with the business challenges commercial open source companies face?
You said earlier in the call that things are thriving now, and we see Elastic and others
out there thriving as well that have been in similar situations as Chef.
Talk about the business side of things for Chef.
I think in order to really go deeper into the business, we've got to just set some ground
rules for how we think about business, so how I think about it, and how a lot of people
in the modern era software startups think about it is the smallest nutshell.
You can imagine that you have this funnel, and at the top of the funnel is everybody who
might could ever use your product, so every possible person who would ever care, so that's
your target market.
The bottom of the funnel is customers, people who pay you money for the privilege, and
what you're trying to do is get people from the top of the funnel to the bottom of the
funnel, right?
It's just how many people at the top can I push to the bottom, and there's a ratio there
where you want that number to be as high as possible.
You'd love to get 100% of them, you know that you want, and so you're trying to just
extract dollar bills from the top to the bottom.
There's a bunch more we could go into in terms of metrics and recurring revenue and all
kinds of stuff, but the TLDR there is people at the top, money at the bottom.
With open source, we talk about it as an open source business model, but that's wrong
in the same way that DevOps isn't a job title.
You can't, DevOps isn't a job title, still isn't a job title.
It never was a job title, but we lost the war, you know?
Like there's plenty of DevOps in the world, and so the idea that that's not a thing,
it doesn't matter that I'm a patent about it, right?
The same thing's true in open source business models.
There is no open source business model.
There are business models, and then there is open source, and there are two very different,
very separate things.
There is nothing unique about open source and business.
Business is business.
You get people from the top of the funnel to the bottom of the funnel, you either do that
with the unit economics that make you money, or don't make you money, if they make you
money, then you can pour more dollar bills into the acquisition of people at the top of
the funnel to get to the bottom, even if that means you don't turn a net profit and
still be a great business because as soon as you stop burning money to acquire more stuff
at the top, but you make a lot of money at the bottom, right?
And so in open source, when we talk about open source business models, what we really
are talking about is how do I create a channel at the top of the funnel?
So people come in in multiple different ways, and we talk about those as channels.
So one channel will be, I'm an open source user of your software.
I download MongoDB, I download Redis, I used it.
Therefore, I'm in the open source channel to the bottom of the funnel, right?
Another channel would be my boss, the CIO, heard about Redis and CIO magazine.
Tells me, you should use Redis, right?
Now, I'm in a very different channel than the open source channel, right?
Now, I'm in a enterprise, or I get a cold email from a rep that says, have you heard
about Redis Labs, right?
That's a different channel, right?
So we have all these different channels, there's a partner channel where like maybe
the guy at Pimitle who was consulting on your Cloud Foundry deployment tells you that you
should use Redis.
That's a partner channel, right?
So like we have all these different channels that people come into our businesses through,
right?
This is true of every business.
Again, it's not unique to open source, but that open source channel is interesting
because it's humongous, right?
If you're a successful open source project, that channel is full of people, right?
Because lots of people are using this software, that's why it's successful open source
software.
So it kind of dwarfs the others in pure numbers, right?
Just the sheer magnitude of what's possible is really high.
And so when we're designing and thinking about our businesses, what tends to happen is
we think about the revenue that that channel produces as belonging to us, right?
If I'm a chef people, I look at that channel and I go, any chef user belongs to me.
And if there's competition in that channel, I don't like it because it means somebody else
can compete with me to monetize the people that are at the top of the funnel, right?
So a good example here is if I'm MongoDB and I sell Atlas, which is their hosted SaaS
product for MongoDB and Amazon and Microsoft are both going to offer MongoDB as a service,
that competes with me to monetize the bottom of the MongoDB funnel, right?
I'm MongoDB, make this investment at the top of the channel.
I expect to return to the bottom and now they're competing with me in the bottom.
And this comes back to how do you feel about that competition is the question because in
one point of view, you're like, well, competition sucks, right?
I'm the one who put all the money into building it.
I'm the one who did all of this stuff and so you look at this thing and you're like,
I deserve the money at the bottom of this channel.
Well, flip that over though.
The value of the channel is that it's massively huge, that it's adoption.
The size of the number of users is why the open source channel is valuable in the first place.
If Amazon or Microsoft create services that sell what I sell,
what's the impact at the top of the channel, right?
What's that do to cement MongoDB as an excellent choice for users at the top of the channel,
right?
The answer is it jacks it up, right?
Like Amazon has a chef service.
They sell it for money, they do prevention, right?
So they sell my what used to be my proprietary software, but now my distribution.
You can buy it from Amazon as a service directly from Amazon we do rub sharing together.
Amazon runs and maintains that service.
I promise you that my channel got bigger, I open source channel got bigger when they did that,
right?
The fact that that button exists meant more people were willing to use chef than they were before,
right?
The pie got bigger.
So what's happening when the redis and the mongos of the world look at that problem is they decide
that the top of the funnel doesn't get bigger or that they don't care
about it getting bigger and instead they care about the extraction at the bottom of the funnel,
right?
So they're nervous about it.
They're like, oh, Amazon will out compete me.
They'll sell it for less, they'll be doing better features, but this, in my point of view,
is completely bonkers, right?
Amazon's never going to invest more in MongoDB than MongoDB.
It's insane on its face, right?
And the idea that that competition exists and it limits their ability to monetize is also,
also to me, feels false.
A good example is elastic.
Amazon's had an elastic service running for as long as elastic has been monetizable basically.
An elastic went public that whole time with Amazon as a competitor.
But you know what?
I ran elastic search.
I used it as a component in my product.
One of the reasons is that it was a dominant standard, how did I know?
Well, everybody offered elastic as a service, right?
It was the effective thing.
So that choice was easy, so I wound up being the channel.
So from a business point of view, they're making these decisions because
they believe that that's what's best for the extraction of capital, of revenue at the bottom
of the channel, and they're doing it at the expense of the spread at the top of the channel.
In your case, you've got a rev share with Amazon.
Is that the case with Mongo or with Redis or was that unique to Chef?
And would that change your outlook at all if that rev share was gone?
It's not the same.
I don't know.
I have certainly not privy to whatever negotiations they may have had, right?
I know the ones I've had.
You know, one of the things that Amazon or any partner or anybody who's going to run your
code as a service needs is the assurance that they'll always be able to provide that service to
their customers, right?
And, you know what's hard to do that with proprietary software?
Because I have no, my only hedge is the business arrangement.
Do you see what I mean?
Like, I can sign a contract that says so, but if I change the terms on my proprietary software,
or I build a new SKU, well, can I still run that thing as a service?
Or if we vibrate at it, like what's the deal?
So the mechanism there is really complicated.
And so one of the reasons that that rev share exists is because so much of those
assurances about what's in the open was in the open, right?
Even more so now.
That doesn't mean that that's always what Amazon will do, or even what they should,
but that's how it worked for us.
If it didn't exist, it wouldn't really change my point of view.
Because if the question is, can I, as the primary producer of the product,
an owner of the brand, and the reason that people attached it as things,
outcompete someone who is essentially selling a generic version of what I sell,
if I can't outcompete that person, shame on me.
You really can't convince me, you really can't convince a customer
that the best person to service their MongoDB as MongoDB is, man, if you can't,
like there's something fundamentally broken in the value proposition here, right?
And I think the truth is that they can.
If you look at Mongo's performance, if you look at Atlas' sales numbers,
it continues to go up.
It was going up before they changed the license, right?
And the reason is, it's a good product.
And it's a better product than the one that you receive
if you just turn on document DB on Azure.
Because it's kind of bare bones when you turn it on in Azure, right?
And the Atlas version has all kinds of stuff that the other one doesn't have.
The idea that that competition in open source,
where the reason you're here is because you have this massive channel,
it doesn't make much business sense to me that that's the conclusion we would come to.
I understand how you get there, but it doesn't make much sense.
Isn't our disruptive products, though, not necessarily better?
They're usually actually worse, but they're good enough.
And the cost is disruptive.
And so in the case of an AWS version of Mongo,
yeah, it's not going to be as good or as maybe well supported
or have as many features as Mongo's version of Mongo,
but it's satisfactory and it's way cheaper.
So it's disruptively cheap.
And then you add to the fact that there's no,
there's no R&D, there's no development costs from Amazon's side.
So you're not competing with them on features.
They're just free writing all the features that you're building.
Well, but here's the thing.
So this is where we come back to the funnel, right?
So like, now we're back to the business.
So like, sure, maybe Amazon, but this is why it's good business for Amazon
to launch your stuff as a service instead of just compete with your directly.
So like, you've brilliantly elucidated why they would want to launch a Mongo service
in the first place, right?
But as soon as they do that, if the top of the funnel was fixed,
if that created no more interest in your product than it did before,
then you'd be right, but it doesn't.
Instead, it turns out that the single largest pool of software developers on the planet
are the ones that use Amazon and AWS or Azure or Google.
How many of those developers are using one of those platforms?
And if your stuff is on all three of those platforms and it's not on the others,
how many eyeballs do you get that cockroach does it?
The answer is our ton of eyeballs, so many eyeballs.
And so the size of that funnel, your possible monetization gets bigger,
hugely bigger than it was before.
And in that moment, your ability to capture that revenue,
every single one of those cut rate document DB users is a potential lead
that's already using your product.
So all you have to do is go find them and be like,
yo, did you see how much better our console is,
how much better our operation stuff is, how you can get on a Zoom with the dude
that wrote that indexing feature when it's broken,
I dare you to get that out of Amazon.
And next thing you know, city bank is like, you know,
Amazon looks pretty good.
I think those kinds of ideas, those sometimes are so
seem so logical, but yet not everybody thinks like that, you know.
So I think this is a great idea of how could you leverage the fact that
these platforms are so massive that they actually become your marketing channel for you.
They are your marketing channel for you.
And the only thing you have to give up is that they're also going to monetize
some number of your customers back to open sources pump rockness, right?
Like, there's a, there's a like, that's the man vibe where like,
when you're saying that Amazon's a net positive for your business,
everybody's like, but they're the man.
And Amazon's going to destroy elastic search.
And you're like, do the elastic search is a worth $1.5 billion with a B.
And they're getting like that commercial where the guys like,
sir, you are the man.
Yeah, that commercial.
Like, exactly are we protecting here?
Because last time I checked, they were public and killing it.
Next up is Heather Meeker.
Heather is a well respected open source lawyer and a specialist in open source software
licensing and strategy, she wrote the book open source for business
and it serves as a guide to open source software licensing.
We're talking about Heather because she's a lawyer who wrote the license.
The SSPO license is a result of her work with MongoDB.
And we wanted to understand the design and the intention of the license.
All right, here we go with Heather.
Heather, let's open up with the SSPO you were the person behind writing it.
Is that correct?
Yes, I helped MongoDB draft the license with, of course,
the help of Mongo legal counsel and their business team.
I think it's fair to say that I led the drafting of it.
Gotcha. And full title of it is the service side public license?
Yes, that's right.
Take us back to, I suppose, the early days of drafting it.
What's it intended to do?
What's the goal of this license?
SSPO was drafted in order to meet a need in a particular way.
So explain what I mean by that.
At the time, and this would have been late 2018 to early 2019,
many companies that were providing software under open source licenses
were very concerned about the use of the software by cloud services providers.
And what they were concerned about was that the cloud service providers were using the software
not contributing back and not participating in the development of the software.
So at that time, there were actually quite a few companies,
and most of these, by the way, were companies in what I would call the
flat form software space or middleware software space.
And they were trying to figure out what to do about that.
They basically went down two different routes.
The first route was the source available route in what we call an open core business model.
And that's not what SSPO is, but that's where you have a core of open source software
usually under say Apache, and then you reserve some of the upsell elements for
under proprietary or source available licenses.
That's the route that most companies went down.
Mongo, on the other hand, wanted to see if they could create a license that was an open source
license, but that managed this issue, and that's how the SSPO came about.
So they drafted the license, submitted it to open source initiative for approval as an open source
license, and eventually it was withdrawn after quite a bit of comment without a particular
ruling from OSI on whether it was appropriate for approval as an open source license.
What happened in that proceeding?
Why wouldn't, like, what were the deciding factors?
I guess they didn't reject it, but it was just like being debated to a certain degree,
and then it was drawn eventually, I assume it was withdrawn because it was not going anywhere,
or was there a different reason for withdrawing it?
It was a long and fraught debate, and the debate had to do with a number of concerns.
I would encourage anybody who's interested to go and read the archives of what's called
license review or license discuss, but I'll try to summarize, understanding that there were a
lot of comments, and I can't summarize them all. The first was technical commentary about
whether the license met the open source definition. So there is a definition of open source,
there's also a free software definition. One of the main tenets of that definition is that
the license can't have any license restrictions, so that would be source available.
If you say you can't use the software for this purpose, it also says that it can't discriminate
against users or technology, context, and so forth. I'm paraphrasing, of course.
So there were those aspects, and there were some comments about that aspect of the license.
There were also a lot of comments about who had drafted it, the process by which it was drafted,
and what Mongo's intent was in creating the license. So those were like meta comments,
not about the license itself, but about the context, and so all of those things were being discussed,
and if you've ever been on one of these discussion groups, you know that they get discussed
in a non-sequential format, and it can be very confusing to follow, but I'd say those were the
main things. Okay, and so do you think that, I mean, I don't know if bias is the author of the
SSPL? Do you believe that the SSPL represents, I guess, even the spirit of open source, if it's not
officially an open source license, or do you think it's something different? Well, we drafted it to
fit the open source definition, and as a lawyer, you know, you have to have concrete things
to go on, and the open source definition is what we had. I think the discussion brought out that
people felt that there was something beyond meeting the open source definition that needed to be
satisfied, and there was a great deal of debate about that. So we looked at the open source definition,
we definitely, you know, avoided license restrictions, we avoided things that were
discriminatory according to the requirements of the OSD, but all of the meta issues were things
that really kind of couldn't be addressed by the draft itself. There is some discrimination
built-in though, right? Or how does it actually, how does it work in order to stop that particular
problem that there was right address? So does that discriminate in the use?
I know we get into legalies here, but you're good at this, so help me understand.
I would say not discriminatory, because in a way, all copy left licenses apply
different conditions when you do different things. So if you use discriminatory in that way,
then GPL2 is discriminatory, because it only applies certain conditions to redistributors.
So that is actually fair game in copy left licensing. Okay.
SSPL applied specific conditions to use of the software. I'm paraphrasing now, but as a software,
software is a service to provide the same functionality of the software. And so yes,
there were conditions that were imposed in those situations that weren't imposed otherwise,
but that I think for most people isn't the meaning of discriminatory according to the OSD.
Discriminatory would be more like you can only use this in a particular field of use,
like you can use it in medical devices, but you can't use it in nuclear weapons or something like that.
You can use it for good, but not for evil.
Well, it's interesting that you say that because there is now a new licensing
movement, I guess called that ethical licensing movement, that actually does impose conditions
based on ethical concerns and moral concerns. And those are clearly not open source licenses,
because they actually do impose license restrictions. In other words, you can't use the
software for this particular purpose. I heard about this too, where I believe it was in China,
there was a specific license about companies that didn't adhere to work ethics where I think it
was like a 999 or something like that. The anti-996 license, that was actually very interesting,
if you'll permit me to make a comment about it. It was, first of all, a very well drafted license,
so it was professionally done. It did address labor conditions, and again, I'm paraphrasing,
but the license says you can't use this software if you are violating the international labor
standards. And it was intended to raise consciousness about labor practices in China.
But what was really interesting about that is that the license was released on GitHub,
and by the way, I think it may have been more a thought experiment than anything else,
but it then caused that GitHub repository to become a vehicle for people to discuss the issue.
So it became almost like a social networking initiative to raise consciousness about the issue,
rather than specifically to develop a licensed document. So I thought that was a very interesting
phenomenon from the point of view of what happened around the putting the license in GitHub
and around the development of the license.
This episode is brought to you by our friends at retool. Retool helps you build internal tools
fast and easy. From startups to Fortune 500s, the world's best teams use retool to power their
internal apps, assemble your app in just a few minutes by dragging and dropping from pre-built
components, connect to most databases or anything with the rest, GraphQL or GRPC API. Retool
empowers you to work with all your data sources seamlessly in one single app. Retool is highly
hackable so you're never limited by what's available out of the box. If you can write it in
JavaScript and an API, you can build it in retool. You can use their cloud service or host it on
print for yourself, learn more and try free at retool.com slash change log. It's interesting how
you know there's so many usages of licenses and you'd mentioned the OSI approval process and how
it was contextual in terms of their Mongo's intent of the license change and the intent of the
SSPO license in general and you also mentioned the OSD and its criteria in your blog post
on the cost community you'd mentioned, how many of the legacy license in the OSI
approved long ago would probably not be approved today and then you'd mentioned that
the criteria for the approval has changed but the OSD has not so it seems like there's like
a lot of moving targets in terms of getting approved by the OSI and Jared mentioned like you know
in terms of this isn't an OSI approved license do you feel it is open source. It's kind of an
interesting perspective just that the fact that there's this OSD that's been drafted I think the
last time it changed was 2007 if I recall correctly. It was a long time ago. It basically
you know hasn't changed in the time that I can remember looking at it and but I think what's
interesting about that is that what OSI is is doing is trying to create community consensus
and isn't wedded to this written definition by the way I don't I say that because that's what
they say it's approval of a license does not merely require it to meet the open source definition
so it does rate it as an interesting question about the clarity of the criteria and the process
but you know this is a community process so those are always they are living breathing things
and they get developed as they go and people are always pushing for transparency but it can
never be you know perfect. The fact that this OSD document hasn't changed in a while though
is that a good thing or a bad thing because you might say it's a bad thing because it doesn't
reflect the way the modern software is developed and deployed into consumers hands and then you
might say it's a good thing because it's so strong it doesn't need to change the definition
is so strong that you know it doesn't have to change what do you think about whether it's
the fact that hasn't changed and so long it's a good thing or a bad thing.
Well I actually agree with you it's kind of a good thing and a bad thing it has worked pretty
well over the years and it's been remarkably robust over the years. Maybe it's time to revisit it
but that would also be a very long process and possibly very controversial. There are other
definitions by the way there's the free software definition and there's a Debian software I think
it's called the software contract sorry if I'm getting that wrong but those are much shorter
and less complicated so I think if it were revised it might there might be some interesting
possibilities to harmonize those definitions. I would say that whether the definition changes
or not is one question I do think that the transparency of the criteria for approval is very
important to the community. What's at stake for these companies and organizations?
Maybe they pick SSPL whether or not it's an improved license or not like what do they win or lose
based on that? Is it marketing value of the term? Is it goodwill? What's at stake?
SSPL is used as part of a dual licensing model and that is something that has been around for a long
time but it's not as popular as it once was so it was really pioneered by MySQL and so what they
did was they said here's our software it's under GPL actually they used a variant of GPL and if you
don't want to abide by the GPL requirements you can negotiate with us for a commercial license
and that's a process that sometimes called selling exceptions. So the strong copy left licenses
like GPL and then later AgPL and then finally SSPL were all used in other contexts as well but
as part of these dual licensing initiatives. The reason that companies adopted them in a dual
licensing strategy is that they were intending that people who are using the software commercially
would probably have to come negotiate for a license and what happened over time was that the MySQL
model which worked pretty well began to break when software moved up to the cloud because the
requirements of GPL only kicked in on redistribution and that wasn't happening anymore because of
cloud deployment. So then companies that were doing dual licensing models moved to AgPL when it was
released and I think that was 2007 and SSPL is I think you know a kind of a logical extension
from that. So that's what they're trying to do they're trying to allow people to use the software
for certain you know in a say to test it out to use it on a small scale to use it to do certain
things but to require people to come to the table when they want to do things at scale or
certain kind of commercial activities. Yeah because the cloud providers are user essentially right
I mean at that point. Yes that's actually very perceptive comment they are users they're not
distributors of software. Right. It's a little bit of a complicated question but I don't think
there's too much doubt about that. So what that means if you look at the GPL say it specifically
says that the license doesn't control the use of software and so that is where the issue comes
to play because the cloud providers are users and so under say GPL they don't have any you
know basically don't have any conditions at all. Right and it's kind of odd to say I mean sure
they're not distributing it out to you know individual installations but they are providing it
to many. So it's still one to many it's still many scenarios. So and that that seems to be where
the issue is that the language of the future of software the way it is is not so much especially
in cloud is not a distributed model. That's a single installation that means the distribution of
change. You're no longer sending a binary or source code to be compiled by a bunch of people
you're set up a service and then charging for the service it's just it's a new way of doing it
newer. Yeah and you know copyright law treats use and distribution a little bit differently
I think that one of the things that maybe it didn't anticipate properly was use was copying at scale
in order to deploy software for hundreds or thousands of users. That is something that is you know
relatively new so as software licensing has progressed you know certain things worked pretty well
when we were in a model where one person would use one copy of the software but that isn't the
world we live in anymore. So when it comes to the letter of the SSPL as reactions to
Mongo initially and now elastic resiliency now there have been critics there have been and this
is a debated thing about the topic is it open source is it open source which is I think a
terrible term. I keep it just hopped on the bandwagon and used it but this is the verbiage that's
out there. There are those who think it's a business risk this SSPL so now I'm reading from
Vicki Prasuerus blog you probably have read this and she says she showed it to some lawyers
some IP lawyers and she says by using an SSP project in your code you are agreeing that if you
provide an online service using that code then you will release not only that code but also the
code for every supporting piece of software all under the SSPL it's not a stretch to interpret the
wording of the license as requiring users of the SSPL software therefore to release the code
for everything straight down to the bare metal this is one interpretation of the license itself
saying effectively that there's perhaps this collateral damage that might happen because of the
way that it's written I would just love to hear as the author of it and I'm sure you've thought
through these things what how do you respond to that what do you think about that statement is it
feasible is it outlandish well I do think it's an over simplification of the of the terms of the
license and don't get me wrong these kinds of provisions are very complicated to read yeah so it's
hard to reduce them to sound bites I do think on on the question of business risk this is the way
I look at it I work with many many companies to develop open source compliance policies and so
what companies do when they develop those policies is they have like a stop go caution list
and you would not expect even AGPL to be on a go list in fact it's usually on a stop list already
and SSPL will be there to any network copy left license meaning any license that has source code
sharing requirements when you deploy within over network those will all be on a stop list so when
you say it's a business risk well yeah but already a lot of the copy left licenses were defined as
business risks so it's it's a you know you're not this isn't blindsided you this this this concern
it's it's known for me out the house door yeah of course I mean we you would not expect people
to green light SSPL software what they would do is they would look at the license and say okay this
is okay with us or it's not and then they would make a decision about it so that's something that
users have to decide for themselves I do think that what you quoted was over stating the risk
somewhat but but you know it's not useful to get into the details of it you have to actually look
at what the license requires and it's really is focused on particular use contexts where people
are providing software as a service hmm I want to say thank you to Vicki for writing this post
because I'm going to quote one more and ask you about this but very very helpful Vicki and
not doing this call with Heather she said basically in regards to the SSPL basically it's a hostile
proprietary license masquerading in the open source clothing now it's getting vicious
oh I don't know what to say whether it's proprietary proprietary is not open source so you know
it's really the same issue I actually think if you look at the FAQs and announcements and so forth
for Mongoin Elastic you know they're they're pretty forthcoming so I'm not sure what they're trying
to be masqueraded they're um so I think that's you know it's it's language intended to
insight inside a uh an argument but I don't know that it's terribly meaningful in an objective way
yeah the primary concern with the SSPL really is section 13 right that's the that's the
like a lot of the concern isn't really elsewhere in it obviously it's a long license but it's
primarily section 13 which describes which we talked about here which is redistribution restrictions
on usage etc yeah if you were to redline it against AGPL or even GPL3 you would find that
almost all the substantive changes are in section 13 well Heather thank you so much for joining us
and explaining these things in ways that we could only fumble around in the dark to understand I
think it's been very helpful and anything else that we didn't ask you or anything about the
license itself or about the situation that is being discussed and debated that you want to say
that we haven't asked you about well I would say that I would remind people that the alternative
is probably to go to a source available license so if people you know are calling it names and so
forth you know what they should consider is that businesses are going to do what their business
strategy requires and so most companies that don't adopt something like SSPL are going to go down
the source available route which is definitely not open source so it's a question of whether you
think half a loaf is better than none I think and there are definitely different views about that
I would say the reality is that most companies are actually going to use licenses that are truly
restrictive in a way rather than SSPL so I would say anybody who is using SSPL is at least
trying to go down something like an open source route even if you don't believe it's open source
up next we're talking about Manish John founder and CTO at DGRAPH labs Manish came on this podcast
a little over two years ago on episode 322 talking about licensing and reslicensing DGRAPH so we
thought it'd be fitting to get him on this episode as well there we go so Manish you and DGRAPH are
in a somewhat similar situation to elastic you're not elastic but you're set up a lot like elastic
is that right that's true so elastics like sensing the way they have done it is that they have
their open source code code located with their proprietary code and it's all source visible except
the open sources under Apache if I'm not wrong and then the proprietary code is under elastic
and similar to DGRAPH where our open source code is Apache and our proprietary code is under
DGRAPH license so as a matter know where do you hear about this news and did you read both sides
have you read what AWS has had to say and what's happened after the relisins what's your your
purview I mean I think I've been hiker news right I hiker news went into flames over this and so
that's where I came to know I don't I know actually I did not have a chance to look at what AWS
actually had to say about that but I really read through the multiple blog posts that elastic
sort of released about what they're changing and some of the reasonings for why they're changing
and this is a story that's it's not the first time right this is the same story that we already had
for cow crush TB we had this story for MongoDB we have this you know across a confluent
and ready slabs you know this is just a series of of changes that are happening in the
in that open source ecosystem and you guys went through similar things as well because we even
have a whole show for you back in October of 2018 where we have you on the changelog there and back
again DGRAPH's tale an excellent name if you're a fan of the Hobbit like I am episode
322 so you've told us a story before but like I guess we don't need to rehash the entire thing
but this has been an area of struggle for you and in your company as well it is something of
you know I wouldn't say it's such a big struggle as as something like elastic wear Amazon is
directly sort of like you know quote-unquote attacking them right for us it's more of like
forward-thinking scenario where we you know we realize that we love open source and just like
Shay mentioned the founder of elastic mentioned in his blog post you know I got I got my
feed-dapped into open source like long time ago and really believe in it and when I was
starting DGRAPH I I was not inspired by any sort of business model right like I was not planning
out hey how would like five years from now we will make money I didn't know how to make money
from open source I just wanted to build open source software right and that's how we got started
so similar sort of like trajectory there in terms of like our interest towards the open source
community and so you know I mean yeah I think the open source theme is similar there so what's
happened since is that he AWS has forked both elastic search and cabana and are going to carry
on open source forks community forks as they're kind of being pitched as what do you think about that
what are they going to succeed are they going to fail there is it a real risk for elastic or no
they did that once before right with the elastic open distro and I think people were really concerned
about how that would pan out and remind me Elastic's share price has not decreased too much right
it hasn't gone into a spiral downward so I guess they're doing well right they'll probably
survive another attack from AWS but I think you know some of the criticism that I see online
about more DBs SSPL and some other companies is that you know these open source companies are
motivated by business and and therefore they are somehow being more realistic like more
morally they are being challenged but I feel like you know the same people then turn around and say
Amazon is completely okay with doing these kind of things because there's well within their
rights to do so because of the licensing put together by the open source and so the conflict
that I feel is right there right you cannot have two different moral bars one for the company who
is who is making money out of your inventions and the second for the inventor themselves right
and sometimes I just wonder right how many open source infrastructure software has Amazon
created and launched in open source right like do we then do we expect to see Dynamo DB coming out
in open source so someone else can build a business like Amazon has done with Dynamo DB that'll be
great right I mean they'll be great day for open source if Amazon does that but I don't think
they have any plan to do it because that's not how they operate and so you know it's well within
I think I think it's in fact I would say it's recommended for open source companies to make sure that
they are able to to to build a successful business just like Amazon is building just like everybody
else is building and so the the motivation to make money out of your inventions is completely
justified or in I would say motor grounds right mm-hmm well there's a concern too at least
based upon Shay's blog post on Elastic saying that Amazon and AWS wasn't putting back
into the open source bucket so to speak so from two avenues one the perspective you just share
which is Dynamo DB for example is an open source and that's not part of their business plan to do
that but then the concern and I suppose what led to this scenario where now is is essentially
AWS not playing by the community rules the license doesn't depict this and that's kind of what
this move is doing is like hey if you can't operate by community rules then we're going to put a
license that that makes it illegal for you to do things that are the way so not pitching back into
the open source name but then you can sort of draw some sentiment from just simply the titles of
their blog post on the AWS open source blog back in 2019 from Adrian Croft uh cockroft
keeping open source open open dish or for lash search which is something you mentioned
and then the second one is the more recent around Elasticsearch which is stepping up for a truly
open source Elasticsearch it's an interesting perspective you've drawn there where they haven't
open source certain things they have because of business reasons but then wanting to be a good
community player in these ways it seems I don't know what do you think it is questionable isn't
it it is kind of questionable and I think like you know if you look at SSPL the server side
public license I think from MongoDB it's actually really it's it I actually I'm still a bit
baffled that it's not approved by OSI because it to me is a fork of derivative of GPL just like
AGPL is which also makes GPL a bit more permissive right if you look at AGPL it's you know allows
you to not have to release your source code if you are using it over the network or something of
that sort or actually I forget exactly the details there but FSPL says that you know you don't have
to release your source code if you're not directly competing by providing the core product as a
service right so it's more permissive than a GPL and so I think it has all the merits I feel in
my opinion to be open source approved and and and guess if SSPL in a world where SSPL gets open
source approval I don't think we have any problem here right then we then then everybody has
already sort of like gathered around SSPL which which we could not do around the common
skills right I mean that was the same idea for common skills but it could not get us there but
already be the big name and some already we could get the industry around SSPL and then we don't
have a debate because it would be open source right yeah there's some details around that we had
a conversation with Heather Maker on this exact subject and something she had said which will be in
the same podcast is if you redlined SSPL versus AGPL the primary difference is this sort of come out
is essentially section 13 which describes you know if you make the functionality the program or
modified version available to their parties of service blah blah blah blah that's where the
changes is section 13 everything else is essentially AGPL and there is a lot of debate around the new
ones and the process to be approved so OSD is very clear hasn't changed in a long time OSD being the
open source definition that's very clear because hasn't changed and it's even derived from
debients existing rules on what open source definition is so there's some history there but the
criteria and the ways that you go about getting these licenses approved by OSI is a bit more
difficult and you can read the transcripts and the notes from the meetings and stuff but that
takes a very motivated user slash reader and so some of this intention that shows to sort of
demystifies them that stuff and maybe give you a TLDR TLD L too long to listen but you know
that's essentially is this criteria for getting it passed you say that the SSPL should be
or could be open source your your baffled as you said that it's not yeah yeah and it has been
approved by that yeah and to be honest like I haven't looked at the counter arguments to that right
then I'm sure there's there are smart people there on the side and they have some counter
arguments but from from a slightly like you know distant perspective without having to go into
the intricate details it seems very similar and maybe if it was built in 1990 is it might have
already been involved in in OSI right but I think one thing that that that we should probably take
away from elastics stuff is that the holy grail of license here leads to so if you look at
elastic license as well right it's it's divided into portions one is the the open source part and
the other one is the completely proprietary part right and so proprietary part they are not changing
from my understanding they're changing the open source part of the code and making it available via
either SSPL or the elastic license and both of them sort of in some shape or form this allow
building a computing service right right now a restrict cloud service providers from offering
this is quotes yeah so that says restrict cloud service providers from offering our service
as a service right and that's in violation of OSD6 and and they are very clear about it's not
it's only to third parties not for internal usage so if I am a big company and I need to build
a product I can provide it as service to my other teams in the company just not to your users
directly right it's a commercial restriction don't compete with me essentially exactly yeah right
because you can compete internally inside your own company yeah not make any money from it but get
great usage of the software but you can't create a competing company right against the inventor
yeah this goes back to what you're saying before the inventor or the user the invention
exactly yeah and they can still build a commercial product on it just not a competing service
right but the holy grail would be to to offer a single license right that that is that
that takes away hey this is proprietary part of the code and this is the quote-unquote open source
or similar to open source part of the code ideally what what looks like what they want to get to
is to offer a single license that can cover both their free and their paid features while being
as open as possible right and that's the that's the if that would be there like I think we would
jump on it immediately because we also currently have dual license which is what cockroach has
which is what elastic has and you know many others have but having that single license would be
would be the holy grail and I don't know if you wanted to talk also about BSL right which is the
MariaDB's license where they say that the initial code is going to be a proprietary but after
a certain amount of time three to five years it would become open source and it would become a
patchy to or something liberal which is what cockroach is doing cockroach DB is doing so
they're open source is which to cockroach BSL modifications likely you know that's also like
a great way to but I actually say the same thing right which is you know please don't compete with
us by providing a service which is providing a service to our core product right like
you know and if you think in terms of what's the core product for Amazon you know let's say
let's say like e-commerce is a core product and if you were to like use Amazon machines to
or Amazon technology to actually build a computing stuff I'm pretty sure they'll be pretty
pissed as well and so so all this comes into doing is that we have spent a lot of time and effort
into building and this is our main source of source of living right right let's just play
play nicely right otherwise we have to invent new licenses yeah they have a Kramer shared
some of the sentiment on that subject because century was licensed BDS-3 and transition to the BSL
and I'm paraphrasing but when I can recall from that conversation episode 371
realizing century was essentially David was saying I want to do whatever it takes to help me run
this commercial business but also respect open source because without the business making
the thing there is no thing and that's a paraphrase of yeah David's sentiment on that but that's
essentially what he boiled it down to was his concern in regards to transitioning away from BDS-3
yeah to the business the business source license which you mentioned yeah and actually if you
think about where that's what is happening right like you know I mean again I argued that
SSPL is very close to open source to today to the AGPL right but SSPL is not open source
so what's actually happening right now is a bunch of open source companies which truly believe in
open source are having to switch to court and court non open source licenses and that's not that's
not great right yeah and that's not great and the funny thing is they are all talking about the
same one player in the market right they're not talking about about a Google or about a Microsoft
or anybody else in fact in the elastic blog post they mentioned that they have played very nicely
with all the other players in the ecosystem just the just AWS right much so I have no person
yeah exactly I mean I have no personal thing against it less right like is we we've done earlier
let's be a completely fine and from what I understand they're not trying to build a dig up alternative
right but it is there is something there where if a bunch of companies are talking about the same
you know scored on court be a curious actor yeah I don't want to say a bad actor right
because exactly because he is don't know but a curious actor I think there must be something
there right do you think then given that we had just said that the OSI that it's in their best
interest for open source to help these businesses that have this concern have this trouble
to create an open source license that give them the needs they have the to sort of solve the
needs they have these problems but also adhere to the letter of open source because if you look
at the intent it seems like they're intending to respect and live within the world of open source
whether it's for the in quotes open source brand name that can't be trademarked because it's
not trademarkable but it certainly has a market ability to it like if you if you're masquerade as
faux open source is that right Jared faux open source that's right then you're not open source
and but there is a your file is a market ability to sing your open source for sure absolutely
yeah absolutely and I think you know we do open source because it allows it's it's not just a way
to to have more eyes and make sure that the product is the score is of high quality and so and so
forth but there's also it's a distribution model right it's a distribution model it's a way by
which you think your software could be consumed by anybody without necessarily having to pay you
right and again they they're not saying that if you build a commercially successful product
using our software pay us they're not saying that they're just saying like just don't
build a competing service against us and and also going back to the first the the the initiation
of a bunch of these open source companies it started with like one or multiple like people who
just believed in open source right they they just wanted to make things in open source because they
have consumed open source software they're life right so when I was like in college I was all into
Linux and I was playing with Gen2 and Ubuntu and I don't know like whatever other Linux flavor
there was out there free BSD net BSD and I just believed in open source and that was our stance
against you know windows at the time right and so I've created multiple projects some of which
actually got popular including the graph and then we have Badger and then we have Ristrano and
they are all open source because we just believe in it right um it's a bit of like a pain to to
have to move away from that even in theory right even in theory yeah just because of this this one
problem so Monesh clean slate start the graph over today same exact software same business pick a
license I think SSPL is looking pretty attractive SSPL is looking pretty attractive right now
and and also like just just notice one more thing right from 2010 or 2015 the world has changed
to be more cloud-first and on-prem later than on-prem first and cloud later approach right and so
if I were if I were or somebody else were to build a service today they might choose not to even
make it open source they might say you know what snowflake has done really well by being
completely cloud-based system and if I'm not wrong snowflake is not open source right um and so
so why open source right maybe that maybe that could be the question is like open source already
has done so problems because there is you know actor or multiple actors like causing so many
issues like why bother with all that just avoid all of that and just go completely close source
and you crystal build a good business out of it right and so that then it becomes just a question
of principle right do you still really believe in open source do you still believe that your
core should be we should be other people should be able to check it and make sure that you're
not doing anything fishy or help you find bugs or you know that kind of stuff so it becomes
a matter of principle and a matter of business it seems like this episode of the change log is brought
to you by render render is a unified platform to build and run all your apps and websites
with free SSL a global CDN private networks and audit employees from Git they handle everything
from simple static sites to complex applications with dozens of microservices if you're a developer
or a founder that's frustrated with AWS's complexity or roku's high costs you owe it to yourself
to use the $100 in free credits are giving our listeners to give render a try render is built for
modern applications and offers everything you need out of the box one click scaling zero downtime
deploys built in SSL private networking manage databases secrets and configuration management
persistent block storage and infrastructure as code the roku customers running production and
staging workloads typically see cost reductions of over 50% after switching to render here's the
best part we work closely with the team at render to ensure you have zero risk by giving you
$100 in free credits plus they're going to assign a world-class engineer to your account to offer
guidance and answer any questions you have when you're ready to transition your infrastructure they'll
be there to help you with that too automate your cloud hosting with render at render.com slash
change log get $100 in free credits to try the render platform plus a world-class engineer assigned
your account to guide you along the way to send an email to our special email change log at render.com
to get access to those free credits all that begins at render.com slash change log
coming up in this segment we're talking with Paul Dicks co-founder and CTO at influx data
Paul shares his perspective on running an open source business how influx data is innovating their
commercial offering while having a permissive MIT licensed version of influx DB Paul also shares
his thoughts on this standoff between elastic and AWS and why he's long gone Mongo and short on
elastic here we go. So Paul tell us tell us your name tell us your company and kind of your
view of the open source world where your opinion is coming from. Yeah so I'm Paul Dicks I'm the CTO
co-founder of influx data where the makers of influx DB which is an open source time series database
I created it in 2013 and I've been initially running the company and then as CTO
which I'm still doing to this day. So my experience over that time has basically been
trying to build a business around an open source software project particularly in infrastructure
software and in databases in particular so elastic obviously I'm very familiar with I saw it when
they you know we're initially becoming a company I remember the project early on some of the work
that they've done was you know served as inspiration to me as I was building out influx and the
various parts of our stack. Very similar software very similar business model it looks like influx
is MIT can you tell us like your license selection and how your business works around it.
Yeah so all of the open source software that we create is MIT licensed and our business model is
basically so we are essentially at this point an open core business so there's open source
influx DB which is MIT licensed people to do whatever the what they want with it it works essentially
as a single server we have a fork of the open source project that is closed source and proprietary
if you want high availability or scale out clustering of influx DB that is our commercial offering
right so essentially we don't put clustering features into the open source everything else
is fair game to go into the open source if it has to do with the single server optimizing query
performance API's functionality all that kind of stuff it goes into free open source so we
we launched to this as a you know managed service inside of AWS in I think it was April of 2016
we launched it as basically like on premise software product that people could buy in September of 2016
our AWS service is still running to this day essentially what that is is it's the closed source
software spun up you know a customer can come and sign up they say what size you know instances they
want how much storage how many instances we spin up the you know the closed source enterprise
version of our product on it we add monitoring and backups and stuff like that and then you know
that's that's the hosted version of the product the what I say on premise version is essentially
you buy the software from us it's an annual subscription and then you run and manage it yourself
and that's either in your own data centers but plenty of people are also doing it inside of AWS
GCP all that kind of stuff last year or I guess late 2019 now we launched basically
version two of our cloud product and that essentially is it's a very different kind of thing
because it's not just a database and it doesn't look anything like the open source software that
we create the API is the same but the underlying like architecture and how everything works together
is completely different and that's for version two dot o of inflex db so the model we
switch to with two dot o we essentially moved to a cloud first model so we deliver that cloud
products continuously is like a SaaS service and then over time some of those features get pulled
out into the open source inflex db is that because of a realization that the other way it wasn't
working well enough or it's just why did you switch to the cloud first model um mainly because
it has nothing to do with open source first it closed it has everything to do with software
delivery cycles so before we looked very much like an enterprise software company we'd have
anywhere from two to four feature bearing releases a year which could then you know get shipped to
our cloud customers and shipped to our own promise customers the problem with that is you don't get
that many cycles of iteration and each release is like super painful to do because there's
so much code wrapped up in it so I really wanted to move to a continuous delivery model so we
could get much faster feedback features out to customers quicker and the individual releases would
be much much smaller so that had to do with basically wanting to be a cloud company and deliver a cloud
product as opposed to deliver like a packaged on premise enterprise products how does that
trickle down to your open source then how does inflex db the open source benefit or not benefit
from this this switch uh I think the benefit is that by the time something lands in open source
we've already vetted the features embedded like its functionality and how it works inside our cloud
products the things with our cloud product we're able to we're able to iterate on it and release
fixes very quickly once you ship something in an open source release it's much more painful to
you know ship a fix ship an update so I think that's a benefit um the the drawback is it's less
I think it reduces the collaboration with the community in terms of what we're developing and
how it's getting done and all that kind of stuff it basically makes like the open source like a
downstream kind of products right yeah well it reflects the tweet you put out which is my own
preference is to keep open co-permissive and open and have a clear strategy as you just
depicted here with how that code will be used in the commercial offering so you're eating on
don't but which is good so yeah so there's what I just described is basically our 2.0 model but
actually I'm actually trying to move even beyond that over to what I call basically like
complementary software model right so we have a new project that we announced a few months ago
called inflex db-i-ox which is basically the new core of the database written in rust using a patch
arrow and the way that we're building this out is essentially there's the open source thing
and then there's another piece of software that we have this close source and as a whole the
system is designed to be two pieces of software one of which is totally open and permissive
permissively licensed you know you can do whatever you want with it you can compete with us that's
fine that's by design um and then the other piece which is the software that we're writing
to be able to run the open source software in our cloud offering so the reason why I say it's
complementary is because what I want is I want our cloud product to be running the open source bits
exactly as is like exactly as the open source community experiences them because it means we'll find
bugs faster it also means we can have more of a collaborative effort with the community in terms
of making improvements because we're not like right now with our cloud 2 offering like
inflex db-2.0 open source is one project cloud 2 is totally separate now we use some of the
libraries from inflex db-2 but it's not like it's not even like a fork of the project it's literally
two separate you know projects and products and they have the they have like the same API
yeah two masters right exactly yeah with with iox instead of serving two masters what I mean
like literally you're serving two masters you have two different projects you it's very difficult
serve both easily absolutely like internally we have a separate team that works on the open source
bits versus the people working on the cloud close source cloud product right i actually the
benefits the open source and it seemed like the benefit of the open source was obvious but
that they're different because they're separate that's what it seemed like I was going to ask you
about that because it seems like with your cloud 2 that you mentioned you can obviously push forward
but it's downstream the open source is downstream and it seems like maybe you know just
disconnected basically yeah yeah it's a bit disconnected whereas like with this new model again like
my goal is so we offer it as a cloud product first that's we're not doing that yet but then later
we'll offer it as an on premise product but the idea there is that people who are adopt
iox and you know deploy a bunch of servers and stuff like that if they come to us and they want
the on premise product it's a product that they add in addition to the open source software
they're already running right they continue to do that it's very very different than our old
inflex dv1.x enterprise model where our enterprise product is a replacement for the open source
inflex db right i think that's a like a heavier lift and it's a bigger ask for
users to replace their open source bits like it's better i think it's better if they're able to
run the open source bits and continue to have that experience because one it makes the contribution
easier it makes it easier for them to consider adopting a commercial product because at that point
they're saying like okay i have this commercial product but it's not like i'm still using the
open source bits so i can still be sure that you know if the commercial relationship goes sour
or i decide i don't like want that functionality it's still good i can still continue to use the
open source bits there's nothing so interesting ramifications that i think i would love to see play out
as you as you go about deploying that new idea in my understanding correctly it's kind of like
the open source bits is like the core software offering and then the the proprietary stuff is like
like a management controller or like a deployment type of a thing like it's all the things are
that surround it that you would be offering as a service perhaps but this is as a licenseable
addition yeah that's a good way of thinking of it it's so yeah we it's basically all this code that
we have to write to offer it as a service right operations backups like deploying new versions of it
management all this kind of stuff the the other thing is we want to be able to offer that as an
home premise piece of software another way to think about this is iox represents the open source
thing represents the data plane whereas our closed source product represents the control plane
but the way the two interact is the control plane interacts with the data plane through its
public API and that public API it's open source so literally if somebody wanted to write
an open source control plane for it or if they wanted to write their own competing software
products they can do so and the license totally permits that yeah and the thing is like we don't
have to worry about our open source bits competing with our commercial bits because the truth is
like right there's like the the responsibilities of the two pieces of software are clearly delineated
so it's like there's no reason for people to put control being plain bits into the main open source
project they would have to create a separate open source project to do it which would make sense
right but that point you're kind of deciding what is control plane and what is data plane
and that's kind of the same concept of like what goes in core and what goes in proprietary isn't it
like what about backups well it could go right into our core offering but it's more of a control
plane kind of a thing so we'll put it over here it seems like you still make those decisions you
just make them in the two pieces of software further apart perhaps I view them as further apart
when I think of open core businesses I think of businesses where the commercial product
is a replacement for the open source products this this is not that and it's designed specifically
not to be that like take data stacks for instance data stacks enterprise is a replacement for
Cassandra right and now like data stacks is obviously offering it as a service called astra
that's doing well but again like that's an open core model that's yeah I think I think a good
example is like Google and Kubernetes right like Kubernetes open source Kubernetes certainly
doesn't represent the entirety of GCP and all the software that runs that but like obviously
Google has invested interest in you know driving Kubernetes forward and GCP happens to be like one of
the best places to buy Kubernetes to operate Kubernetes so what's your thoughts on the service
site public license in the last six move you obviously prefer this other way going about it but
you think it's a smart by them shortsighted what what you take on that so I don't think it's not
the move I would make and you know to be totally honest though like to me it's not really about a
license choice it's more about how they intend to drive innovation that drives you know commercial
value and the truth is like I own stock in MongoDB which is obviously SSPL licensed software
but I do not own stock in elastic nor would I buy stock in elastic right now yet I'm holding
MongoDB right even though they they're both SSPL so like from a pure you know mercenary investor
perspective I'm long Mongo but I'm short elastic and it has nothing to do with the license
I think them changing the license is more a symptom of the fact that they're getting out
innovated on their cloud offering if they had a cloud offering that was demonstrably better
than Amazon's elastic service they would continue to be able to drive revenue and drive people
to it if they're so upset because they feel like a last or sorry AWS is eating their lunch
on the hosted offering and then they you know they change their license like I mean ultimately
like they had a choice which was they either write more closed source code or they
re license their you know they they they continue right code out in the open I'm putting air quotes
around this but that code is under a different license they chose the different license path which
to me I think I mean personally I'm not a fan of source available licenses I think they're
disservice to the community because because then yeah yeah they are disservice to the community
because then you can say like oh community members like saw your code or whatever like it just means that
people can't start like competing projects with you without you know putting themselves at risk of being
you know accused of taking your code or whatever right like I prefer open code is open close code is
closed and the the thing that kind of annoys me about the whole elastic AWS standoff is both
of them are trying to you know put forth this position that they have you know more the moral high
ground there you know they have moral superiority over the other one right like Amazon saying like
oh we're protectors of open source so we're gonna launch this fork or whatever and the truth is
like even when they did open distro I called it a fork then even though they said it's not a fork
because it's like whatever a build it was all it was always obvious like when they launched that
that fork is what it was ultimately going to become because elastic was gonna take the stance
the Amazon stealing from us so we're gonna change the license a more and more of our code which is
then going to give Amazon no choice but to fork right right so Amazon's playing they they have the
moral high ground it's not true like they just they're just doing what's best for their customers
and they're sure shareholders right they're trying to optimize shareholder value and obviously like
all their customers are saying like host elastic for us and then elastic is trying to say like
oh we're doing this to protect ourselves from Amazon because they're stealing from us and the truth
is there are tons of hosting companies limited hosting elastic for a long time and if you look at
where elastic makes this money it's probably mostly from long search how many log search companies
are built on top of elastic and they just open that up right like so it's they're elastic is
just upset because Amazon out competed them on the hosting front whereas like other hosting providers
like compose and even and stuff like that didn't really make a dent in the elastic's top line
right so their claim like oh we have to do this like no you don't you could have kept the code
Apache B2 and you could have like written more and more code in your service offering that's
closed source and kept the two separate right and this is actually one of the things that I agree
with Amazon about where they said the reason they created the open distro was because elastic was
polluting the open source repo with code under different licenses right under the elastic license
and stuff like that and what they've done now is they've gone all in on that strategy so
basically like they want all the benefits of being an open source company you know free marketing
free adoption getting other people to talk about it use it whatever but they don't want to pay
the price the price of being really open source is that you're giving software away for free
yes you're being permitted but that also means that anybody can take your software and
compete with you which you have to be okay with like any any read anything that you can really
call platform is only a platform if the total economic activity of it outstrips that of any single
vendor right so if you claim your platform but basically you're getting all the money from it
no you're not like you're monopoly as you said in your tweets right this comes back to something
you were saying which in your stance for not 2.0 in terms of influx what you're doing but
the next version I think you call it Iox this maybe version 3 I'm not sure what you call it but
you said by design it's a permissive and you just you've designed your architecture in terms of
commercial offering to expect other competitors whereas it seems like elastic based on what you
saying others have said and even kind of what they're depicting is that they're upset that Amazon is
either lunch and it's not by design their model is not by design to be competed with right exactly
like their their hope was that they would get this massively popular project which it is elastic
is top 10 database project right like used the world over but then they want like the classic
strategy is like you spend a bunch of money to get optimized growth and then once you have scale
and a monopoly you want to start collecting monopoly rents right so now elastic can't collect
monopoly rents because other people are hosting elastic they're so they're trying to change the
model so they can do that but the problem is like then you're a different sort of business entirely
right like it's fine to be a closed source database company there's fauna which is new firebase
is closed like in the cloud each of the cloud providers has a handful of closed source databases
so that's a totally fine thing to do but to try and say like oh we're open source and then change
it it's just like it's kind of ridiculous we'll pull fascinating stuff thanks for sharing your
your take with us definitely want to come and have you back once you've rolled out this new what
you call complimentary model yeah some real world results to report back how it's going if it's
serving the needs of you and your users and the open source community the way that you hope it
will we'll love to have you back on the show yeah i think that's just one closing thought on that
really quick which you reminded me of which is like i think for people to think about it can
open permissive open source licensing survive and infrastructure software i totally think it can
but i think the people who are producing it have to think ahead of time about how they commercialize
it over the long run and for us with iox i've already defined what success looks like is
tons of competitors literally cloud providers adopting the software and competing with us
so what that which isn't gonna happen for years best case scenario right if it happens at all
but what that means is we are developing a commercial product side by side with the open product
right now so that if cloud providers decide they want to get in on the game three years from now
we've already had plenty of time to actually build a product to you know compete
hmm stay tuned for results as they come out thanks Paul really appreciate you come on the show
all right thanks guys
next we're talking with vicky brusor vicky has been in free and open source software for 30
years now and she's been working with startups and enterprises doing open source and free software
business strategy for quite a while we use vicky's post titled elastic search and kabana are now
business risks as a reference on the situation we even quoted her post a few times in our conversation
with Heather Meeker so naturally we had a talk with her here we go all right so here is vicky brusor
and vicky share with us first of all your position in the open source world like what your angle
at the conversation that we're having where you coming from um i do corporate strategy around
free and open source software so i work with startups and enterprises and various organizations
to help them be more successful by contributing releasing and just generally becoming a good
citizen in free and open source software communities in a way that's both good for their bottom
line and for the communities okay and you've been doing this for a while yeah i have i've been
in free and open source software for over 30 years and i've been doing this specific thing um for
yeah quite a while now awesome well we're glad we got you on the show then so you wrote a piece
called elastic search and kabana are now business risks and when you lay out the case for that
headline do you want to share that with our audience just the the brief synopsis of why you believe
that's the case with this service i've public license well i mean sspl i'm going to lead to the lawyers
this is a legal matter but it is not an open source license it is however being portrayed as open
which everybody is going to interpret as open source because that's just the way we speak about
things i think that in and of itself is kind of deceptive and that's a problem um but the bigger
problem is that this is a license change and uh if you are going to use something you are agreeing
to that license if you upgrade elastic search or kabana to i believe it was seven dot 11 if i recall
but if you upgrade you are tacitly or otherwise we're agreeing to this new license as as pl or
elastic license it doesn't matter you're agreeing to that you're taking on new obligations
for your company for your organization are you aware of that do you know what you're taking on
do you know the potential risks you might have or maybe there are benefits i don't know
but this is not something that you as a company can afford to ignore because it can have huge
ramifications to your code base i see so like the side swipe is a big problem the fact that so many
people might upgrade and unbeknownst to them they're agreement with the software that they're running
and the companies involved has changed is there no transparency to that change is the is it not
something that people are aware of or how does it how's it um the only transparency really is going
to be that blog posts or i guess there's like two blog posts now with the elastic finger wagging
at amazon and also screwing over their entire community and ecosystem but hey that's their strategic
decision to make they seem to think that was the right move for them um more power to them um yeah
that's really the only warning um you're otherwise not going to know as far as i know i haven't
obviously looked at the code um but it doesn't make any sense that there'd be some sort of a
new click through on elastic surgeon and kibana for instance um as you're installing them on
your server how are you going to confirm that yes i have seen that there is a new license
and yes i agree with this new license nobody does that not for open source software and
especially not on the server side um so it's very likely people are going to upgrade and
tacitly agree to this whether they know it or not or maybe they know about this new license
that they decide not to upgrade at all well now you're not getting security updates to this
software to elastic search to kibana that's another potential risk to your company um maybe you're
using these things for free and a great deal of people build a lot of cool stuff on top of the elk
stack there's a reason why there's an acronym that we all know the elk stack it is that popular
so a lot of people are building on this and they might be building on the free version
um well that free version is not going to get real license and you're going to be screwed but
if you're building a company on top of this open source software and your company relies upon it
and you're not already paying for some sort of support either from elastic or someone else
you're also putting your company at risk in that way so there's a lot of really really important
strategic things that people need to be considering when they are selecting open source software
and you need to be remain aware of your entire free and open source software supply chain because
as we are seeing right here it can shift out from under you you can have license changes,
you can have security problems, you can have maintainers who just you know piece out and they go away
and suddenly are using something that's completely unmaintained so there's a lot of risk there for a
company and most companies I've worked with are completely unaware of this and it's
uh potentially a disaster waiting to happen I mean as we all know this is what happened with um
oh that a credit reporting thing um starts with an E. Equifax. Equifax thank you.
Now I've been saying elastic so often that's all I need to say. That's the no that's the only
E in your room. Exactly thank you guys um yeah that was Equifax was not paying attention to their
open source software supply chain you know they had a piece of software and they're
believed it may have been Apache struts or something like that that had been upgraded to fix a
security hole but they hadn't bothered to upgrade it internally because they weren't paying that much
attention then they got compromising billions of people had their private information stolen so if you
not paying attention to stuff like this not only elastic but the larger picture you are just
one bad day away from being the next Equifax and do you want to do that? Is there a right way that
elastic could have done this in terms of just forget the decision the SSPL but like let's say I just
want to change my license is there like a correct get like start a new project with the new
license is there like a best practices for changing a license that doesn't sweep out the rug from
people potentially um for an open source project there there's obviously many different ways
you can do it and elastic has their perspective which is going to come from a very you know corporate
perspective we're looking to make money um and then the community will be coming from a different
perspective so it you can have different approaches but the one thing everyone should always do
is be communicating with their community and their ecosystem this cut everyone by surprise
that shows that elastic is not respecting the community and the people who have been contributing
and who rely on this software so they have essentially looked at their ecosystem and said yeah we don't
care we don't care what you're doing because all we want to do is screw over Amazon and collateral
damage began so they should have communicated they should have told people this is going to be
coming maybe they should have done it for instance at version 8.0 rather than version from 7.10
to 7.11 yeah go to a major version maybe that would have been smarter um maybe cut a major version
right there just do that maybe you could have warped it internally and start developing internally
and then leave the open source project alone for other people to build upon and you can even
you know push stuff upstream and pull stuff downstream you can still benefit from that
while having your proprietary internally developed software you can still do that I mean there's lots
of different options they could have done but the one thing they should have done and did not
it was communicate with their ecosystem with their community they pop this on everyone and it was kind
of rude they violated the trust of their community and that you can't really get that back at this
point so you're kind of screwed the trust of your community and you've submerged your brand
which is going to be incredibly difficult to fix it's a somewhat too elastic credit and maybe I'm
wrong by even saying this but it seems like they've gone through a lot that when she had mentioned
the CTO of elastic mentioned the litigation and the behind the scenes discussions I think from
the asset it might be easy to say screwed over but the new ones there I think is they've gone
through a lot and maybe they're in some ways quite wrong and reactionary but I'd say in some ways at
least depicted by these tweets and this post maybe they went about it wrong but their intention
was to try to fix this problem which is very difficult to fix because our permissive license
license does allow this competition and maybe from a business standpoint they've sort of hit their
links with being able to take that in quotes their quotes at least abuse from Amazon and they're
just trying to tread water to some degree with the scenario I know that this is a podcast and so
people can't see but me but picture me rolling my eyes right now okay so the trademark thing aside
that's a different matter that lawsuit for the trademark is a separate issue if they are
licensing as a a reaction to that then it's essentially them stamping the little princess for
taking their ball and going home and it's a childish reaction to a trademark infringement lawsuit
which you know I I do think that they are I mean they were totally justified in that lawsuit
for their trademark infringement against Amazon I have absolutely no problem with that I do think
that Amazon was rolling the dice on that one and they lost and I think they will lose in that
particular trademark thing but I am not a lawyer so right that's just my legal advice all right
that's just your take so but the relaxing you know if they screwed up at the very beginning
by not understanding what a permissive license allows and what that is they they screwed that up
they put it out there under a permissive Apache to license without thinking somebody can now build
a better product offering on top of this very easily and if they're building a better product
offering than we are I'm sorry folks we live in a capitalistic system that's just the way these
things go it's your fault for releasing your intellectual property under that sort of license
and not understanding what it's going to mean and if you did understand not taking enough measures
to make sure that even if that does happen you can still be successful and frankly if you look
at their numbers and their financials they are doing quite well so yeah what are they looking to do
how are they going to looking to grab all these people who are using the Amazon ecosystem and
move them over to elastic search and to elastic I don't think that's going to happen from a market
perspective so I it's very difficult to see strategically why they thought this might have been a
good move to just give their entire ecosystem the finger while trying to take a shot at Amazon it
just it kind of seems I know amateurish and I would have expected better of a company that's been
around for this long so let's say I was a happy elastic search user a month ago and here I am today
and I'm like Vicki what do I do they did change the license on me I don't know what to do do you
say what do you say to that go to the Amazon fork or I will say I don't know it depends of course I
have been known to do a fair bit of consulting and so any consultant who isn't starting up with
it depends is you know trying to sell you something all right so it totally depends what are your needs
how much do you rely on that elastic search or on that cabana we have to remember there are two
really big projects here that have been realized since it's not just that elastic search so
what is the strategic value and the architectural value of that piece of software to your product
to your company look at that first what is the niche it is filling and then well anything else
fill it and it could be that as you evaluate this and you look at it it makes sense to just pay
elastic for their software fine that is a valid choice and I support you doing that I want your
company to be successful but you might also find that there are other alternatives you might
there are a couple of forks now um there's as we all know the the thing that kicked all this off
which is Amazon's open distribution for elastic search from the last time elastic search did
something kind of goofy in their open source world um and then there's they have their new
totally open distribution that Amazon just forked and I think there's a third one um which is from
log z.io something like that there's at least one other uh version out there there may be others
and maybe you don't need elastic search at all maybe you just need Lucy you know um and if you
using kabana yeah exactly maybe Grafana would be better for you I don't know it depends upon your needs
don't go doing something just because it's what everyone else is doing look at your needs your
company your architecture your budgets your staffing who knows what software do you have to ramp
up on something new there's lots of variables in there and so I can't give it one size fits all
I'll talk about you just ask you once in the whole community could just listen to you know let's multi-caste
oh no there is no single solution to any of this sort of stuff because every one of these
companies is going to be different if they were all the same then we wouldn't need them all right
we we'd have one market one company boom you're done but we don't have one license
one license gosh wouldn't that be oh my gosh that would be so easy that it's so nice
but that's what we do we wouldn't need a consultant at that point well yeah but I do corporate
strategy it's not simply that licensing it's about so much more than that that's just a tiny
sliver well if you want to respect your time is there anything else that you want to share that
we didn't ask you any questions that like you just want to put this out there that we have an
ask your question to at least oh no not really I think you've you've covered pretty much the
highlights of the stuff and it'll be interesting to see what others have to say um yeah I don't
typically listen to podcasts but maybe I'll actually listen to this one there we go well you might
hear me thank you at least once before I think you right now for your time but uh thank you
really for your time and for this blog post you shared it was very helpful for us to sort of get
a different perspective on these concerns around open source quoted a couple of things you'd
mentioned in your blog post in the conversation with Heather Meeker which is a part of the show too
but thank you for your post and also today thank you for your time we appreciate it absolutely
thanks again last up on this epic show is Marcus Stengvist who's self-described as an
everyday web developer from Sweden let's do this please tell us who you are and your vantage point
on the software world yeah well I I'm just a normal everyday web developer from Sweden awesome
my name is Marcus so I work for a small company no one has heard of yes yet there you go
yeah exactly how did you first hear about the news of elastics relaxing just curious like where do
you get your info yeah well I read the article from elastic on hacking use so I saw that I'm posting
like this is not okay or something in those lines awesome well we're gathering perspectives from
all over the community so it's awesome to have just a regular everyday web developer here on the show
so welcome and yeah what do you think what are your thoughts on the whole situation there's
lots of nuance lots of ins lots of outs yeah exactly exactly yeah well I read a lot of comments and
I read the Amazon article as well when they posted about like forking the report after they
realized the elastic and I really don't even use elastic or Amazon website that much but I
think I care a lot about open source in general so so I'm with you I don't use AWS I don't use
elastic I also care a lot of open source what is it about open source that you'd like or that
you care about and are trying to preserve or be a part of that's a good question I think it's
the matter of fact that I can use stuff for free and like chairs with colleagues and people
all around the world without any restrictions and no one is like can forbid me from using stuff
which I want to use so when you first heard about the real license to the sspl what was your hot
take what was your emotional reaction were you indifferent were you mad at elastic did it feel
like it's no longer open source or do you still think it's still in the spirit of open source
well I think I am actually very much on the elastic side for me okay I saw a lot of comments on
how can you use that word like oh Amazon is all in the rights and yeah the other but they have
they have actually done the same with MongoDB if you like two years ago I guess right where they
pushed them to basically real license because they simply don't want to pay I guess their fees
I think Amazon could could be a bit more friendly towards those open source companies and
because right now when they use the products for free and maybe they hurt the possibilities of
future open source companies coming forward so if you were an elastic user elastic search user
yeah I have been in the past you have been but if you were today like when you read the
real license you would have been probably last it would not have concerned you or offended you
or changed the way you looked at elastic search well I think it's sad that they have to do it
that they have to realize that they feel like they need to and that's that's what made me think
that their move is kind of okay anyway because I will still support them and I would rather use them
than the fork created by Amazon yeah so the fork still exists under the the new fork which is
created by Amazon and trying to carry on from that point forward I think it still exists under
the previous license but you would continue with elastic versus the elastic search and
component forks that are run by AWS now exactly and that's simply because I believe in their
vision or I believe in their product and I think Amazon is going to have a hard time
keeping up or maybe they won't I am not sure but time will tell on that yeah time will tell
that of course but the same goes with MongoDB and their document to be I guess I still think
MongoDB is a superior choice just because it's their project and their their vision so the
so you're not an open source purest then not at all not at all more pragmatic more about free
and open and available have you thought about any of the other licenses like the source available
licenses are you cool with that and these other things like business source licensing surely these
are things that you've read about being in the open source world are these things that you're
also just like whatever you want to license your code as if I can use it for free and contribute
back somehow it's cool yeah I think it's cool like every license is their own choice if you want
to license your work in certain ways your choice and if you want to share your work with others
that's just a possible thing and I feel in this case like Amazon is hurting the possibility to do
that awesome anything any other thoughts no I think yeah you people that are on like Amazon side
should maybe read the article from Frederick lord nay or something like that okay which is like
I'm tick crunch called ABS gives open source to middle finger I think that's an article that
sums up my views pretty well awesome hand that off to me and we'll include in the shadows for
everybody yeah appreciate you hopping on and sharing your opinion with us yeah thank you all right
that was an epic episode thank you so much for tuning in if you haven't heard yet we have a
membership it's called change log plus plus because hate when I increment things it is better
as they say you can subscribe at change log dot com slash plus plus get closer to the metal
make the ads disappear and of course support all of our podcasts again change log dot com slash
plus plus and of course huge thanks to our partners linode fastly and lunch darkly also thanks
to brake master cylinder for making all of our awesome beats and of course thanks to you for
listening we appreciate your attention we appreciate you listening and one more step you could take
is to join the community change log dot com slash community it's free to join come hang of us in slack
call this place your home change log dot com slash community that's it for this week we'll see you next week
we'll see you next week
